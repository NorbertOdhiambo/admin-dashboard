{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar parser = require('postcss-value-parser');\n\nvar list = require('postcss').list;\n\nvar uniq = require('../utils').uniq;\n\nvar escapeRegexp = require('../utils').escapeRegexp;\n\nvar splitSelector = require('../utils').splitSelector;\n\nfunction convert(value) {\n  if (value && value.length === 2 && value[0] === 'span' && parseInt(value[1], 10) > 0) {\n    return [false, parseInt(value[1], 10)];\n  }\n\n  if (value && value.length === 1 && parseInt(value[0], 10) > 0) {\n    return [parseInt(value[0], 10), false];\n  }\n\n  return [false, false];\n}\n\nfunction translate(values, startIndex, endIndex) {\n  var startValue = values[startIndex];\n  var endValue = values[endIndex];\n\n  if (!startValue) {\n    return [false, false];\n  }\n\n  var _convert = convert(startValue),\n      start = _convert[0],\n      spanStart = _convert[1];\n\n  var _convert2 = convert(endValue),\n      end = _convert2[0],\n      spanEnd = _convert2[1];\n\n  if (start && !endValue) {\n    return [start, false];\n  }\n\n  if (spanStart && end) {\n    return [end - spanStart, spanStart];\n  }\n\n  if (start && spanEnd) {\n    return [start, spanEnd];\n  }\n\n  if (start && end) {\n    return [start, end - start];\n  }\n\n  return [false, false];\n}\n\nfunction parse(decl) {\n  var node = parser(decl.value);\n  var values = [];\n  var current = 0;\n  values[current] = [];\n\n  for (var _iterator = _createForOfIteratorHelperLoose(node.nodes), _step; !(_step = _iterator()).done;) {\n    var i = _step.value;\n\n    if (i.type === 'div') {\n      current += 1;\n      values[current] = [];\n    } else if (i.type === 'word') {\n      values[current].push(i.value);\n    }\n  }\n\n  return values;\n}\n\nfunction insertDecl(decl, prop, value) {\n  if (value && !decl.parent.some(function (i) {\n    return i.prop === \"-ms-\" + prop;\n  })) {\n    decl.cloneBefore({\n      prop: \"-ms-\" + prop,\n      value: value.toString()\n    });\n  }\n} // Track transforms\n\n\nfunction prefixTrackProp(_ref) {\n  var prop = _ref.prop,\n      prefix = _ref.prefix;\n  return prefix + prop.replace('template-', '');\n}\n\nfunction transformRepeat(_ref2, _ref3) {\n  var nodes = _ref2.nodes;\n  var gap = _ref3.gap;\n\n  var _nodes$reduce = nodes.reduce(function (result, node) {\n    if (node.type === 'div' && node.value === ',') {\n      result.key = 'size';\n    } else {\n      result[result.key].push(parser.stringify(node));\n    }\n\n    return result;\n  }, {\n    key: 'count',\n    size: [],\n    count: []\n  }),\n      count = _nodes$reduce.count,\n      size = _nodes$reduce.size; // insert gap values\n\n\n  if (gap) {\n    var _ret = function () {\n      size = size.filter(function (i) {\n        return i.trim();\n      });\n      var val = [];\n\n      var _loop = function _loop(i) {\n        size.forEach(function (item, index) {\n          if (index > 0 || i > 1) {\n            val.push(gap);\n          }\n\n          val.push(item);\n        });\n      };\n\n      for (var i = 1; i <= count; i++) {\n        _loop(i);\n      }\n\n      return {\n        v: val.join(' ')\n      };\n    }();\n\n    if (typeof _ret === \"object\") return _ret.v;\n  }\n\n  return \"(\" + size.join('') + \")[\" + count.join('') + \"]\";\n}\n\nfunction prefixTrackValue(_ref4) {\n  var value = _ref4.value,\n      gap = _ref4.gap;\n  var result = parser(value).nodes.reduce(function (nodes, node) {\n    if (node.type === 'function' && node.value === 'repeat') {\n      return nodes.concat({\n        type: 'word',\n        value: transformRepeat(node, {\n          gap: gap\n        })\n      });\n    }\n\n    if (gap && node.type === 'space') {\n      return nodes.concat({\n        type: 'space',\n        value: ' '\n      }, {\n        type: 'word',\n        value: gap\n      }, node);\n    }\n\n    return nodes.concat(node);\n  }, []);\n  return parser.stringify(result);\n} // Parse grid-template-areas\n\n\nvar DOTS = /^\\.+$/;\n\nfunction track(start, end) {\n  return {\n    start: start,\n    end: end,\n    span: end - start\n  };\n}\n\nfunction getColumns(line) {\n  return line.trim().split(/\\s+/g);\n}\n\nfunction parseGridAreas(_ref5) {\n  var rows = _ref5.rows,\n      gap = _ref5.gap;\n  return rows.reduce(function (areas, line, rowIndex) {\n    if (gap.row) rowIndex *= 2;\n    if (line.trim() === '') return areas;\n    getColumns(line).forEach(function (area, columnIndex) {\n      if (DOTS.test(area)) return;\n      if (gap.column) columnIndex *= 2;\n\n      if (typeof areas[area] === 'undefined') {\n        areas[area] = {\n          column: track(columnIndex + 1, columnIndex + 2),\n          row: track(rowIndex + 1, rowIndex + 2)\n        };\n      } else {\n        var _areas$area = areas[area],\n            column = _areas$area.column,\n            row = _areas$area.row;\n        column.start = Math.min(column.start, columnIndex + 1);\n        column.end = Math.max(column.end, columnIndex + 2);\n        column.span = column.end - column.start;\n        row.start = Math.min(row.start, rowIndex + 1);\n        row.end = Math.max(row.end, rowIndex + 2);\n        row.span = row.end - row.start;\n      }\n    });\n    return areas;\n  }, {});\n} // Parse grid-template\n\n\nfunction testTrack(node) {\n  return node.type === 'word' && /^\\[.+]$/.test(node.value);\n}\n\nfunction verifyRowSize(result) {\n  if (result.areas.length > result.rows.length) {\n    result.rows.push('auto');\n  }\n\n  return result;\n}\n\nfunction parseTemplate(_ref6) {\n  var decl = _ref6.decl,\n      gap = _ref6.gap;\n  var gridTemplate = parser(decl.value).nodes.reduce(function (result, node) {\n    var type = node.type,\n        value = node.value;\n    if (testTrack(node) || type === 'space') return result; // area\n\n    if (type === 'string') {\n      result = verifyRowSize(result);\n      result.areas.push(value);\n    } // values and function\n\n\n    if (type === 'word' || type === 'function') {\n      result[result.key].push(parser.stringify(node));\n    } // divider(/)\n\n\n    if (type === 'div' && value === '/') {\n      result.key = 'columns';\n      result = verifyRowSize(result);\n    }\n\n    return result;\n  }, {\n    key: 'rows',\n    columns: [],\n    rows: [],\n    areas: []\n  });\n  return {\n    areas: parseGridAreas({\n      rows: gridTemplate.areas,\n      gap: gap\n    }),\n    columns: prefixTrackValue({\n      value: gridTemplate.columns.join(' '),\n      gap: gap.column\n    }),\n    rows: prefixTrackValue({\n      value: gridTemplate.rows.join(' '),\n      gap: gap.row\n    })\n  };\n} // Insert parsed grid areas\n\n/**\n * Get an array of -ms- prefixed props and values\n * @param  {Object} [area] area object with column and row data\n * @param  {Boolean} [addRowSpan] should we add grid-column-row value?\n * @param  {Boolean} [addColumnSpan] should we add grid-column-span value?\n * @return {Array<Object>}\n */\n\n\nfunction getMSDecls(area, addRowSpan, addColumnSpan) {\n  if (addRowSpan === void 0) {\n    addRowSpan = false;\n  }\n\n  if (addColumnSpan === void 0) {\n    addColumnSpan = false;\n  }\n\n  return [].concat({\n    prop: '-ms-grid-row',\n    value: String(area.row.start)\n  }, area.row.span > 1 || addRowSpan ? {\n    prop: '-ms-grid-row-span',\n    value: String(area.row.span)\n  } : [], {\n    prop: '-ms-grid-column',\n    value: String(area.column.start)\n  }, area.column.span > 1 || addColumnSpan ? {\n    prop: '-ms-grid-column-span',\n    value: String(area.column.span)\n  } : []);\n}\n\nfunction getParentMedia(parent) {\n  if (parent.type === 'atrule' && parent.name === 'media') {\n    return parent;\n  }\n\n  if (!parent.parent) {\n    return false;\n  }\n\n  return getParentMedia(parent.parent);\n}\n/**\n * change selectors for rules with duplicate grid-areas.\n * @param  {Array<Rule>} rules\n * @param  {Array<String>} templateSelectors\n * @return {Array<Rule>} rules with changed selectors\n */\n\n\nfunction changeDuplicateAreaSelectors(ruleSelectors, templateSelectors) {\n  ruleSelectors = ruleSelectors.map(function (selector) {\n    var selectorBySpace = list.space(selector);\n    var selectorByComma = list.comma(selector);\n\n    if (selectorBySpace.length > selectorByComma.length) {\n      selector = selectorBySpace.slice(-1).join('');\n    }\n\n    return selector;\n  });\n  return ruleSelectors.map(function (ruleSelector) {\n    var newSelector = templateSelectors.map(function (tplSelector, index) {\n      var space = index === 0 ? '' : ' ';\n      return \"\" + space + tplSelector + \" > \" + ruleSelector;\n    });\n    return newSelector;\n  });\n}\n/**\n * check if selector of rules are equal\n * @param  {Rule} ruleA\n * @param  {Rule} ruleB\n * @return {Boolean}\n */\n\n\nfunction selectorsEqual(ruleA, ruleB) {\n  return ruleA.selectors.some(function (sel) {\n    return ruleB.selectors.some(function (s) {\n      return s === sel;\n    });\n  });\n}\n/**\n * Parse data from all grid-template(-areas) declarations\n * @param  {Root} css css root\n * @return {Object} parsed data\n */\n\n\nfunction parseGridTemplatesData(css) {\n  var parsed = []; // we walk through every grid-template(-areas) declaration and store\n  // data with the same area names inside the item\n\n  css.walkDecls(/grid-template(-areas)?$/, function (d) {\n    var rule = d.parent;\n    var media = getParentMedia(rule);\n    var gap = getGridGap(d);\n    var inheritedGap = inheritGridGap(d, gap);\n\n    var _parseTemplate = parseTemplate({\n      decl: d,\n      gap: inheritedGap || gap\n    }),\n        areas = _parseTemplate.areas;\n\n    var areaNames = Object.keys(areas); // skip node if it doesn't have areas\n\n    if (areaNames.length === 0) {\n      return true;\n    } // check parsed array for item that include the same area names\n    // return index of that item\n\n\n    var index = parsed.reduce(function (acc, _ref7, idx) {\n      var allAreas = _ref7.allAreas;\n      var hasAreas = allAreas && areaNames.some(function (area) {\n        return allAreas.includes(area);\n      });\n      return hasAreas ? idx : acc;\n    }, null);\n\n    if (index !== null) {\n      // index is found, add the grid-template data to that item\n      var _parsed$index = parsed[index],\n          allAreas = _parsed$index.allAreas,\n          rules = _parsed$index.rules; // check if rule has no duplicate area names\n\n      var hasNoDuplicates = rules.some(function (r) {\n        return r.hasDuplicates === false && selectorsEqual(r, rule);\n      });\n      var duplicatesFound = false; // check need to gather all duplicate area names\n\n      var duplicateAreaNames = rules.reduce(function (acc, r) {\n        if (!r.params && selectorsEqual(r, rule)) {\n          duplicatesFound = true;\n          return r.duplicateAreaNames;\n        }\n\n        if (!duplicatesFound) {\n          areaNames.forEach(function (name) {\n            if (r.areas[name]) {\n              acc.push(name);\n            }\n          });\n        }\n\n        return uniq(acc);\n      }, []); // update grid-row/column-span values for areas with duplicate\n      // area names. @see #1084 and #1146\n\n      rules.forEach(function (r) {\n        areaNames.forEach(function (name) {\n          var area = r.areas[name];\n\n          if (area && area.row.span !== areas[name].row.span) {\n            areas[name].row.updateSpan = true;\n          }\n\n          if (area && area.column.span !== areas[name].column.span) {\n            areas[name].column.updateSpan = true;\n          }\n        });\n      });\n      parsed[index].allAreas = uniq([].concat(allAreas, areaNames));\n      parsed[index].rules.push({\n        hasDuplicates: !hasNoDuplicates,\n        params: media.params,\n        selectors: rule.selectors,\n        node: rule,\n        duplicateAreaNames: duplicateAreaNames,\n        areas: areas\n      });\n    } else {\n      // index is NOT found, push the new item to the parsed array\n      parsed.push({\n        allAreas: areaNames,\n        areasCount: 0,\n        rules: [{\n          hasDuplicates: false,\n          duplicateRules: [],\n          params: media.params,\n          selectors: rule.selectors,\n          node: rule,\n          duplicateAreaNames: [],\n          areas: areas\n        }]\n      });\n    }\n\n    return undefined;\n  });\n  return parsed;\n}\n/**\n * insert prefixed grid-area declarations\n * @param  {Root}  css css root\n * @param  {Function} isDisabled check if the rule is disabled\n * @return {void}\n */\n\n\nfunction insertAreas(css, isDisabled) {\n  // parse grid-template declarations\n  var gridTemplatesData = parseGridTemplatesData(css); // return undefined if no declarations found\n\n  if (gridTemplatesData.length === 0) {\n    return undefined;\n  } // we need to store the rules that we will insert later\n\n\n  var rulesToInsert = {};\n  css.walkDecls('grid-area', function (gridArea) {\n    var gridAreaRule = gridArea.parent;\n    var hasPrefixedRow = gridAreaRule.first.prop === '-ms-grid-row';\n    var gridAreaMedia = getParentMedia(gridAreaRule);\n\n    if (isDisabled(gridArea)) {\n      return undefined;\n    }\n\n    var gridAreaRuleIndex = gridAreaMedia ? css.index(gridAreaMedia) : css.index(gridAreaRule);\n    var value = gridArea.value; // found the data that matches grid-area identifier\n\n    var data = gridTemplatesData.filter(function (d) {\n      return d.allAreas.includes(value);\n    })[0];\n\n    if (!data) {\n      return true;\n    }\n\n    var lastArea = data.allAreas[data.allAreas.length - 1];\n    var selectorBySpace = list.space(gridAreaRule.selector);\n    var selectorByComma = list.comma(gridAreaRule.selector);\n    var selectorIsComplex = selectorBySpace.length > 1 && selectorBySpace.length > selectorByComma.length; // prevent doubling of prefixes\n\n    if (hasPrefixedRow) {\n      return false;\n    } // create the empty object with the key as the last area name\n    // e.g if we have templates with \"a b c\" values, \"c\" will be the last area\n\n\n    if (!rulesToInsert[lastArea]) {\n      rulesToInsert[lastArea] = {};\n    }\n\n    var lastRuleIsSet = false; // walk through every grid-template rule data\n\n    for (var _iterator2 = _createForOfIteratorHelperLoose(data.rules), _step2; !(_step2 = _iterator2()).done;) {\n      var rule = _step2.value;\n      var area = rule.areas[value];\n      var hasDuplicateName = rule.duplicateAreaNames.includes(value); // if we can't find the area name, update lastRule and continue\n\n      if (!area) {\n        var lastRuleIndex = css.index(rulesToInsert[lastArea].lastRule);\n\n        if (gridAreaRuleIndex > lastRuleIndex) {\n          rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule;\n        }\n\n        continue;\n      } // for grid-templates inside media rule we need to create empty\n      // array to push prefixed grid-area rules later\n\n\n      if (rule.params && !rulesToInsert[lastArea][rule.params]) {\n        rulesToInsert[lastArea][rule.params] = [];\n      }\n\n      if ((!rule.hasDuplicates || !hasDuplicateName) && !rule.params) {\n        // grid-template has no duplicates and not inside media rule\n        getMSDecls(area, false, false).reverse().forEach(function (i) {\n          return gridAreaRule.prepend(Object.assign(i, {\n            raws: {\n              between: gridArea.raws.between\n            }\n          }));\n        });\n        rulesToInsert[lastArea].lastRule = gridAreaRule;\n        lastRuleIsSet = true;\n      } else if (rule.hasDuplicates && !rule.params && !selectorIsComplex) {\n        (function () {\n          // grid-template has duplicates and not inside media rule\n          var cloned = gridAreaRule.clone();\n          cloned.removeAll();\n          getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach(function (i) {\n            return cloned.prepend(Object.assign(i, {\n              raws: {\n                between: gridArea.raws.between\n              }\n            }));\n          });\n          cloned.selectors = changeDuplicateAreaSelectors(cloned.selectors, rule.selectors);\n\n          if (rulesToInsert[lastArea].lastRule) {\n            rulesToInsert[lastArea].lastRule.after(cloned);\n          }\n\n          rulesToInsert[lastArea].lastRule = cloned;\n          lastRuleIsSet = true;\n        })();\n      } else if (rule.hasDuplicates && !rule.params && selectorIsComplex && gridAreaRule.selector.includes(rule.selectors[0])) {\n        // grid-template has duplicates and not inside media rule\n        // and the selector is complex\n        gridAreaRule.walkDecls(/-ms-grid-(row|column)/, function (d) {\n          return d.remove();\n        });\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach(function (i) {\n          return gridAreaRule.prepend(Object.assign(i, {\n            raws: {\n              between: gridArea.raws.between\n            }\n          }));\n        });\n      } else if (rule.params) {\n        (function () {\n          // grid-template is inside media rule\n          // if we're inside media rule, we need to store prefixed rules\n          // inside rulesToInsert object to be able to preserve the order of media\n          // rules and merge them easily\n          var cloned = gridAreaRule.clone();\n          cloned.removeAll();\n          getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach(function (i) {\n            return cloned.prepend(Object.assign(i, {\n              raws: {\n                between: gridArea.raws.between\n              }\n            }));\n          });\n\n          if (rule.hasDuplicates && hasDuplicateName) {\n            cloned.selectors = changeDuplicateAreaSelectors(cloned.selectors, rule.selectors);\n          }\n\n          cloned.raws = rule.node.raws;\n\n          if (css.index(rule.node.parent) > gridAreaRuleIndex) {\n            // append the prefixed rules right inside media rule\n            // with grid-template\n            rule.node.parent.append(cloned);\n          } else {\n            // store the rule to insert later\n            rulesToInsert[lastArea][rule.params].push(cloned);\n          } // set new rule as last rule ONLY if we didn't set lastRule for\n          // this grid-area before\n\n\n          if (!lastRuleIsSet) {\n            rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule;\n          }\n        })();\n      }\n    }\n\n    return undefined;\n  }); // append stored rules inside the media rules\n\n  Object.keys(rulesToInsert).forEach(function (area) {\n    var data = rulesToInsert[area];\n    var lastRule = data.lastRule;\n    Object.keys(data).reverse().filter(function (p) {\n      return p !== 'lastRule';\n    }).forEach(function (params) {\n      if (data[params].length > 0 && lastRule) {\n        lastRule.after({\n          name: 'media',\n          params: params\n        });\n        lastRule.next().append(data[params]);\n      }\n    });\n  });\n  return undefined;\n}\n/**\n * Warn user if grid area identifiers are not found\n * @param  {Object} areas\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\n\n\nfunction warnMissedAreas(areas, decl, result) {\n  var missed = Object.keys(areas);\n  decl.root().walkDecls('grid-area', function (gridArea) {\n    missed = missed.filter(function (e) {\n      return e !== gridArea.value;\n    });\n  });\n\n  if (missed.length > 0) {\n    decl.warn(result, 'Can not find grid areas: ' + missed.join(', '));\n  }\n\n  return undefined;\n}\n/**\n * compare selectors with grid-area rule and grid-template rule\n * show warning if grid-template selector is not found\n * (this function used for grid-area rule)\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\n\n\nfunction warnTemplateSelectorNotFound(decl, result) {\n  var rule = decl.parent;\n  var root = decl.root();\n  var duplicatesFound = false; // slice selector array. Remove the last part (for comparison)\n\n  var slicedSelectorArr = list.space(rule.selector).filter(function (str) {\n    return str !== '>';\n  }).slice(0, -1); // we need to compare only if selector is complex.\n  // e.g '.grid-cell' is simple, but '.parent > .grid-cell' is complex\n\n  if (slicedSelectorArr.length > 0) {\n    var gridTemplateFound = false;\n    var foundAreaSelector = null;\n    root.walkDecls(/grid-template(-areas)?$/, function (d) {\n      var parent = d.parent;\n      var templateSelectors = parent.selectors;\n\n      var _parseTemplate2 = parseTemplate({\n        decl: d,\n        gap: getGridGap(d)\n      }),\n          areas = _parseTemplate2.areas;\n\n      var hasArea = areas[decl.value]; // find the the matching selectors\n\n      for (var _iterator3 = _createForOfIteratorHelperLoose(templateSelectors), _step3; !(_step3 = _iterator3()).done;) {\n        var tplSelector = _step3.value;\n\n        if (gridTemplateFound) {\n          break;\n        }\n\n        var tplSelectorArr = list.space(tplSelector).filter(function (str) {\n          return str !== '>';\n        });\n        gridTemplateFound = tplSelectorArr.every(function (item, idx) {\n          return item === slicedSelectorArr[idx];\n        });\n      }\n\n      if (gridTemplateFound || !hasArea) {\n        return true;\n      }\n\n      if (!foundAreaSelector) {\n        foundAreaSelector = parent.selector;\n      } // if we found the duplicate area with different selector\n\n\n      if (foundAreaSelector && foundAreaSelector !== parent.selector) {\n        duplicatesFound = true;\n      }\n\n      return undefined;\n    }); // warn user if we didn't find template\n\n    if (!gridTemplateFound && duplicatesFound) {\n      decl.warn(result, 'Autoprefixer cannot find a grid-template ' + (\"containing the duplicate grid-area \\\"\" + decl.value + \"\\\" \") + (\"with full selector matching: \" + slicedSelectorArr.join(' ')));\n    }\n  }\n}\n/**\n * warn user if both grid-area and grid-(row|column)\n * declarations are present in the same rule\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\n\n\nfunction warnIfGridRowColumnExists(decl, result) {\n  var rule = decl.parent;\n  var decls = [];\n  rule.walkDecls(/^grid-(row|column)/, function (d) {\n    if (!d.prop.endsWith('-end') && !d.value.startsWith('span')) {\n      decls.push(d);\n    }\n  });\n\n  if (decls.length > 0) {\n    decls.forEach(function (d) {\n      d.warn(result, 'You already have a grid-area declaration present in the rule. ' + (\"You should use either grid-area or \" + d.prop + \", not both\"));\n    });\n  }\n\n  return undefined;\n} // Gap utils\n\n\nfunction getGridGap(decl) {\n  var gap = {}; // try to find gap\n\n  var testGap = /^(grid-)?((row|column)-)?gap$/;\n  decl.parent.walkDecls(testGap, function (_ref8) {\n    var prop = _ref8.prop,\n        value = _ref8.value;\n\n    if (/^(grid-)?gap$/.test(prop)) {\n      var _parser$nodes = parser(value).nodes,\n          row = _parser$nodes[0],\n          column = _parser$nodes[2];\n      gap.row = row && parser.stringify(row);\n      gap.column = column ? parser.stringify(column) : gap.row;\n    }\n\n    if (/^(grid-)?row-gap$/.test(prop)) gap.row = value;\n    if (/^(grid-)?column-gap$/.test(prop)) gap.column = value;\n  });\n  return gap;\n}\n/**\n * parse media parameters (for example 'min-width: 500px')\n * @param  {String} params parameter to parse\n * @return {}\n */\n\n\nfunction parseMediaParams(params) {\n  if (!params) {\n    return false;\n  }\n\n  var parsed = parser(params);\n  var prop;\n  var value;\n  parsed.walk(function (node) {\n    if (node.type === 'word' && /min|max/g.test(node.value)) {\n      prop = node.value;\n    } else if (node.value.includes('px')) {\n      value = parseInt(node.value.replace(/\\D/g, ''));\n    }\n  });\n  return [prop, value];\n}\n/**\n * Compare the selectors and decide if we\n * need to inherit gap from compared selector or not.\n * @type {String} selA\n * @type {String} selB\n * @return {Boolean}\n */\n\n\nfunction shouldInheritGap(selA, selB) {\n  var result; // get arrays of selector split in 3-deep array\n\n  var splitSelectorArrA = splitSelector(selA);\n  var splitSelectorArrB = splitSelector(selB);\n\n  if (splitSelectorArrA[0].length < splitSelectorArrB[0].length) {\n    // abort if selectorA has lower descendant specificity then selectorB\n    // (e.g '.grid' and '.hello .world .grid')\n    return false;\n  } else if (splitSelectorArrA[0].length > splitSelectorArrB[0].length) {\n    // if selectorA has higher descendant specificity then selectorB\n    // (e.g '.foo .bar .grid' and '.grid')\n    var idx = splitSelectorArrA[0].reduce(function (res, _ref9, index) {\n      var item = _ref9[0];\n      var firstSelectorPart = splitSelectorArrB[0][0][0];\n\n      if (item === firstSelectorPart) {\n        return index;\n      }\n\n      return false;\n    }, false);\n\n    if (idx) {\n      result = splitSelectorArrB[0].every(function (arr, index) {\n        return arr.every(function (part, innerIndex) {\n          return (// because selectorA has more space elements, we need to slice\n            // selectorA array by 'idx' number to compare them\n            splitSelectorArrA[0].slice(idx)[index][innerIndex] === part\n          );\n        });\n      });\n    }\n  } else {\n    // if selectorA has the same descendant specificity as selectorB\n    // this condition covers cases such as: '.grid.foo.bar' and '.grid'\n    result = splitSelectorArrB.some(function (byCommaArr) {\n      return byCommaArr.every(function (bySpaceArr, index) {\n        return bySpaceArr.every(function (part, innerIndex) {\n          return splitSelectorArrA[0][index][innerIndex] === part;\n        });\n      });\n    });\n  }\n\n  return result;\n}\n/**\n * inherit grid gap values from the closest rule above\n * with the same selector\n * @param  {Declaration} decl\n * @param  {Object} gap gap values\n * @return {Object | Boolean} return gap values or false (if not found)\n */\n\n\nfunction inheritGridGap(decl, gap) {\n  var rule = decl.parent;\n  var mediaRule = getParentMedia(rule);\n  var root = rule.root(); // get an array of selector split in 3-deep array\n\n  var splitSelectorArr = splitSelector(rule.selector); // abort if the rule already has gaps\n\n  if (Object.keys(gap).length > 0) {\n    return false;\n  } // e.g ['min-width']\n\n\n  var _parseMediaParams = parseMediaParams(mediaRule.params),\n      prop = _parseMediaParams[0];\n\n  var lastBySpace = splitSelectorArr[0]; // get escaped value from the selector\n  // if we have '.grid-2.foo.bar' selector, will be '\\.grid\\-2'\n\n  var escaped = escapeRegexp(lastBySpace[lastBySpace.length - 1][0]);\n  var regexp = new RegExp(\"(\" + escaped + \"$)|(\" + escaped + \"[,.])\"); // find the closest rule with the same selector\n\n  var closestRuleGap;\n  root.walkRules(regexp, function (r) {\n    var gridGap; // abort if are checking the same rule\n\n    if (rule.toString() === r.toString()) {\n      return false;\n    } // find grid-gap values\n\n\n    r.walkDecls('grid-gap', function (d) {\n      return gridGap = getGridGap(d);\n    }); // skip rule without gaps\n\n    if (!gridGap || Object.keys(gridGap).length === 0) {\n      return true;\n    } // skip rules that should not be inherited from\n\n\n    if (!shouldInheritGap(rule.selector, r.selector)) {\n      return true;\n    }\n\n    var media = getParentMedia(r);\n\n    if (media) {\n      // if we are inside media, we need to check that media props match\n      // e.g ('min-width' === 'min-width')\n      var propToCompare = parseMediaParams(media.params)[0];\n\n      if (propToCompare === prop) {\n        closestRuleGap = gridGap;\n        return true;\n      }\n    } else {\n      closestRuleGap = gridGap;\n      return true;\n    }\n\n    return undefined;\n  }); // if we find the closest gap object\n\n  if (closestRuleGap && Object.keys(closestRuleGap).length > 0) {\n    return closestRuleGap;\n  }\n\n  return false;\n}\n\nfunction warnGridGap(_ref10) {\n  var gap = _ref10.gap,\n      hasColumns = _ref10.hasColumns,\n      decl = _ref10.decl,\n      result = _ref10.result;\n  var hasBothGaps = gap.row && gap.column;\n\n  if (!hasColumns && (hasBothGaps || gap.column && !gap.row)) {\n    delete gap.column;\n    decl.warn(result, 'Can not implement grid-gap without grid-template-columns');\n  }\n}\n/**\n * normalize the grid-template-rows/columns values\n * @param  {String} str grid-template-rows/columns value\n * @return {Array} normalized array with values\n * @example\n * let normalized = normalizeRowColumn('1fr repeat(2, 20px 50px) 1fr')\n * normalized // <= ['1fr', '20px', '50px', '20px', '50px', '1fr']\n */\n\n\nfunction normalizeRowColumn(str) {\n  var normalized = parser(str).nodes.reduce(function (result, node) {\n    if (node.type === 'function' && node.value === 'repeat') {\n      var key = 'count';\n\n      var _node$nodes$reduce = node.nodes.reduce(function (acc, n) {\n        if (n.type === 'word' && key === 'count') {\n          acc[0] = Math.abs(parseInt(n.value));\n          return acc;\n        }\n\n        if (n.type === 'div' && n.value === ',') {\n          key = 'value';\n          return acc;\n        }\n\n        if (key === 'value') {\n          acc[1] += parser.stringify(n);\n        }\n\n        return acc;\n      }, [0, '']),\n          count = _node$nodes$reduce[0],\n          value = _node$nodes$reduce[1];\n\n      if (count) {\n        for (var i = 0; i < count; i++) {\n          result.push(value);\n        }\n      }\n\n      return result;\n    }\n\n    if (node.type === 'space') {\n      return result;\n    }\n\n    return result.concat(parser.stringify(node));\n  }, []);\n  return normalized;\n}\n/**\n * Autoplace grid items\n * @param {Declaration} decl\n * @param {Result} result\n * @param {Object} gap gap values\n * @param {String} autoflowValue grid-auto-flow value\n * @return {void}\n * @see https://github.com/postcss/autoprefixer/issues/1148\n */\n\n\nfunction autoplaceGridItems(decl, result, gap, autoflowValue) {\n  if (autoflowValue === void 0) {\n    autoflowValue = 'row';\n  }\n\n  var parent = decl.parent;\n  var rowDecl = parent.nodes.find(function (i) {\n    return i.prop === 'grid-template-rows';\n  });\n  var rows = normalizeRowColumn(rowDecl.value);\n  var columns = normalizeRowColumn(decl.value); // Build array of area names with dummy values. If we have 3 columns and\n  // 2 rows, filledRows will be equal to ['1 2 3', '4 5 6']\n\n  var filledRows = rows.map(function (_, rowIndex) {\n    return Array.from({\n      length: columns.length\n    }, function (v, k) {\n      return k + rowIndex * columns.length + 1;\n    }).join(' ');\n  });\n  var areas = parseGridAreas({\n    rows: filledRows,\n    gap: gap\n  });\n  var keys = Object.keys(areas);\n  var items = keys.map(function (i) {\n    return areas[i];\n  }); // Change the order of cells if grid-auto-flow value is 'column'\n\n  if (autoflowValue.includes('column')) {\n    items = items.sort(function (a, b) {\n      return a.column.start - b.column.start;\n    });\n  } // Insert new rules\n\n\n  items.reverse().forEach(function (item, index) {\n    var column = item.column,\n        row = item.row;\n    var nodeSelector = parent.selectors.map(function (sel) {\n      return sel + (\" > *:nth-child(\" + (keys.length - index) + \")\");\n    }).join(', '); // create new rule\n\n    var node = parent.clone().removeAll(); // change rule selector\n\n    node.selector = nodeSelector; // insert prefixed row/column values\n\n    node.append({\n      prop: '-ms-grid-row',\n      value: row.start\n    });\n    node.append({\n      prop: '-ms-grid-column',\n      value: column.start\n    }); // insert rule\n\n    parent.after(node);\n  });\n  return undefined;\n}\n\nmodule.exports = {\n  parse: parse,\n  translate: translate,\n  parseTemplate: parseTemplate,\n  parseGridAreas: parseGridAreas,\n  warnMissedAreas: warnMissedAreas,\n  insertAreas: insertAreas,\n  insertDecl: insertDecl,\n  prefixTrackProp: prefixTrackProp,\n  prefixTrackValue: prefixTrackValue,\n  getGridGap: getGridGap,\n  warnGridGap: warnGridGap,\n  warnTemplateSelectorNotFound: warnTemplateSelectorNotFound,\n  warnIfGridRowColumnExists: warnIfGridRowColumnExists,\n  inheritGridGap: inheritGridGap,\n  autoplaceGridItems: autoplaceGridItems\n};","map":{"version":3,"names":["_createForOfIteratorHelperLoose","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","done","value","TypeError","next","bind","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","from","test","arr","len","arr2","parser","require","list","uniq","escapeRegexp","splitSelector","convert","parseInt","translate","values","startIndex","endIndex","startValue","endValue","_convert","start","spanStart","_convert2","end","spanEnd","parse","decl","node","current","_iterator","nodes","_step","type","push","insertDecl","prop","parent","some","cloneBefore","prefixTrackProp","_ref","prefix","replace","transformRepeat","_ref2","_ref3","gap","_nodes$reduce","reduce","result","key","stringify","size","count","_ret","filter","trim","val","_loop","forEach","item","index","v","join","prefixTrackValue","_ref4","concat","DOTS","track","span","getColumns","line","split","parseGridAreas","_ref5","rows","areas","rowIndex","row","area","columnIndex","column","_areas$area","Math","min","max","testTrack","verifyRowSize","parseTemplate","_ref6","gridTemplate","columns","getMSDecls","addRowSpan","addColumnSpan","String","getParentMedia","changeDuplicateAreaSelectors","ruleSelectors","templateSelectors","map","selector","selectorBySpace","space","selectorByComma","comma","ruleSelector","newSelector","tplSelector","selectorsEqual","ruleA","ruleB","selectors","sel","s","parseGridTemplatesData","css","parsed","walkDecls","d","rule","media","getGridGap","inheritedGap","inheritGridGap","_parseTemplate","areaNames","keys","acc","_ref7","idx","allAreas","hasAreas","includes","_parsed$index","rules","hasNoDuplicates","r","hasDuplicates","duplicatesFound","duplicateAreaNames","params","updateSpan","areasCount","duplicateRules","undefined","insertAreas","isDisabled","gridTemplatesData","rulesToInsert","gridArea","gridAreaRule","hasPrefixedRow","first","gridAreaMedia","gridAreaRuleIndex","data","lastArea","selectorIsComplex","lastRuleIsSet","_iterator2","_step2","hasDuplicateName","lastRuleIndex","lastRule","reverse","prepend","assign","raws","between","cloned","clone","removeAll","after","remove","append","p","warnMissedAreas","missed","root","e","warn","warnTemplateSelectorNotFound","slicedSelectorArr","str","gridTemplateFound","foundAreaSelector","_parseTemplate2","hasArea","_iterator3","_step3","tplSelectorArr","every","warnIfGridRowColumnExists","decls","endsWith","startsWith","testGap","_ref8","_parser$nodes","parseMediaParams","walk","shouldInheritGap","selA","selB","splitSelectorArrA","splitSelectorArrB","res","_ref9","firstSelectorPart","part","innerIndex","byCommaArr","bySpaceArr","mediaRule","splitSelectorArr","_parseMediaParams","lastBySpace","escaped","regexp","RegExp","closestRuleGap","walkRules","gridGap","propToCompare","warnGridGap","_ref10","hasColumns","hasBothGaps","normalizeRowColumn","normalized","_node$nodes$reduce","abs","autoplaceGridItems","autoflowValue","rowDecl","find","filledRows","_","k","items","sort","a","b","nodeSelector","module","exports"],"sources":["C:/Users/HP/Desktop/dashboard/node_modules/autoprefixer/lib/hacks/grid-utils.js"],"sourcesContent":["\"use strict\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar parser = require('postcss-value-parser');\n\nvar list = require('postcss').list;\n\nvar uniq = require('../utils').uniq;\n\nvar escapeRegexp = require('../utils').escapeRegexp;\n\nvar splitSelector = require('../utils').splitSelector;\n\nfunction convert(value) {\n  if (value && value.length === 2 && value[0] === 'span' && parseInt(value[1], 10) > 0) {\n    return [false, parseInt(value[1], 10)];\n  }\n\n  if (value && value.length === 1 && parseInt(value[0], 10) > 0) {\n    return [parseInt(value[0], 10), false];\n  }\n\n  return [false, false];\n}\n\nfunction translate(values, startIndex, endIndex) {\n  var startValue = values[startIndex];\n  var endValue = values[endIndex];\n\n  if (!startValue) {\n    return [false, false];\n  }\n\n  var _convert = convert(startValue),\n      start = _convert[0],\n      spanStart = _convert[1];\n\n  var _convert2 = convert(endValue),\n      end = _convert2[0],\n      spanEnd = _convert2[1];\n\n  if (start && !endValue) {\n    return [start, false];\n  }\n\n  if (spanStart && end) {\n    return [end - spanStart, spanStart];\n  }\n\n  if (start && spanEnd) {\n    return [start, spanEnd];\n  }\n\n  if (start && end) {\n    return [start, end - start];\n  }\n\n  return [false, false];\n}\n\nfunction parse(decl) {\n  var node = parser(decl.value);\n  var values = [];\n  var current = 0;\n  values[current] = [];\n\n  for (var _iterator = _createForOfIteratorHelperLoose(node.nodes), _step; !(_step = _iterator()).done;) {\n    var i = _step.value;\n\n    if (i.type === 'div') {\n      current += 1;\n      values[current] = [];\n    } else if (i.type === 'word') {\n      values[current].push(i.value);\n    }\n  }\n\n  return values;\n}\n\nfunction insertDecl(decl, prop, value) {\n  if (value && !decl.parent.some(function (i) {\n    return i.prop === \"-ms-\" + prop;\n  })) {\n    decl.cloneBefore({\n      prop: \"-ms-\" + prop,\n      value: value.toString()\n    });\n  }\n} // Track transforms\n\n\nfunction prefixTrackProp(_ref) {\n  var prop = _ref.prop,\n      prefix = _ref.prefix;\n  return prefix + prop.replace('template-', '');\n}\n\nfunction transformRepeat(_ref2, _ref3) {\n  var nodes = _ref2.nodes;\n  var gap = _ref3.gap;\n\n  var _nodes$reduce = nodes.reduce(function (result, node) {\n    if (node.type === 'div' && node.value === ',') {\n      result.key = 'size';\n    } else {\n      result[result.key].push(parser.stringify(node));\n    }\n\n    return result;\n  }, {\n    key: 'count',\n    size: [],\n    count: []\n  }),\n      count = _nodes$reduce.count,\n      size = _nodes$reduce.size; // insert gap values\n\n\n  if (gap) {\n    var _ret = function () {\n      size = size.filter(function (i) {\n        return i.trim();\n      });\n      var val = [];\n\n      var _loop = function _loop(i) {\n        size.forEach(function (item, index) {\n          if (index > 0 || i > 1) {\n            val.push(gap);\n          }\n\n          val.push(item);\n        });\n      };\n\n      for (var i = 1; i <= count; i++) {\n        _loop(i);\n      }\n\n      return {\n        v: val.join(' ')\n      };\n    }();\n\n    if (typeof _ret === \"object\") return _ret.v;\n  }\n\n  return \"(\" + size.join('') + \")[\" + count.join('') + \"]\";\n}\n\nfunction prefixTrackValue(_ref4) {\n  var value = _ref4.value,\n      gap = _ref4.gap;\n  var result = parser(value).nodes.reduce(function (nodes, node) {\n    if (node.type === 'function' && node.value === 'repeat') {\n      return nodes.concat({\n        type: 'word',\n        value: transformRepeat(node, {\n          gap: gap\n        })\n      });\n    }\n\n    if (gap && node.type === 'space') {\n      return nodes.concat({\n        type: 'space',\n        value: ' '\n      }, {\n        type: 'word',\n        value: gap\n      }, node);\n    }\n\n    return nodes.concat(node);\n  }, []);\n  return parser.stringify(result);\n} // Parse grid-template-areas\n\n\nvar DOTS = /^\\.+$/;\n\nfunction track(start, end) {\n  return {\n    start: start,\n    end: end,\n    span: end - start\n  };\n}\n\nfunction getColumns(line) {\n  return line.trim().split(/\\s+/g);\n}\n\nfunction parseGridAreas(_ref5) {\n  var rows = _ref5.rows,\n      gap = _ref5.gap;\n  return rows.reduce(function (areas, line, rowIndex) {\n    if (gap.row) rowIndex *= 2;\n    if (line.trim() === '') return areas;\n    getColumns(line).forEach(function (area, columnIndex) {\n      if (DOTS.test(area)) return;\n      if (gap.column) columnIndex *= 2;\n\n      if (typeof areas[area] === 'undefined') {\n        areas[area] = {\n          column: track(columnIndex + 1, columnIndex + 2),\n          row: track(rowIndex + 1, rowIndex + 2)\n        };\n      } else {\n        var _areas$area = areas[area],\n            column = _areas$area.column,\n            row = _areas$area.row;\n        column.start = Math.min(column.start, columnIndex + 1);\n        column.end = Math.max(column.end, columnIndex + 2);\n        column.span = column.end - column.start;\n        row.start = Math.min(row.start, rowIndex + 1);\n        row.end = Math.max(row.end, rowIndex + 2);\n        row.span = row.end - row.start;\n      }\n    });\n    return areas;\n  }, {});\n} // Parse grid-template\n\n\nfunction testTrack(node) {\n  return node.type === 'word' && /^\\[.+]$/.test(node.value);\n}\n\nfunction verifyRowSize(result) {\n  if (result.areas.length > result.rows.length) {\n    result.rows.push('auto');\n  }\n\n  return result;\n}\n\nfunction parseTemplate(_ref6) {\n  var decl = _ref6.decl,\n      gap = _ref6.gap;\n  var gridTemplate = parser(decl.value).nodes.reduce(function (result, node) {\n    var type = node.type,\n        value = node.value;\n    if (testTrack(node) || type === 'space') return result; // area\n\n    if (type === 'string') {\n      result = verifyRowSize(result);\n      result.areas.push(value);\n    } // values and function\n\n\n    if (type === 'word' || type === 'function') {\n      result[result.key].push(parser.stringify(node));\n    } // divider(/)\n\n\n    if (type === 'div' && value === '/') {\n      result.key = 'columns';\n      result = verifyRowSize(result);\n    }\n\n    return result;\n  }, {\n    key: 'rows',\n    columns: [],\n    rows: [],\n    areas: []\n  });\n  return {\n    areas: parseGridAreas({\n      rows: gridTemplate.areas,\n      gap: gap\n    }),\n    columns: prefixTrackValue({\n      value: gridTemplate.columns.join(' '),\n      gap: gap.column\n    }),\n    rows: prefixTrackValue({\n      value: gridTemplate.rows.join(' '),\n      gap: gap.row\n    })\n  };\n} // Insert parsed grid areas\n\n/**\n * Get an array of -ms- prefixed props and values\n * @param  {Object} [area] area object with column and row data\n * @param  {Boolean} [addRowSpan] should we add grid-column-row value?\n * @param  {Boolean} [addColumnSpan] should we add grid-column-span value?\n * @return {Array<Object>}\n */\n\n\nfunction getMSDecls(area, addRowSpan, addColumnSpan) {\n  if (addRowSpan === void 0) {\n    addRowSpan = false;\n  }\n\n  if (addColumnSpan === void 0) {\n    addColumnSpan = false;\n  }\n\n  return [].concat({\n    prop: '-ms-grid-row',\n    value: String(area.row.start)\n  }, area.row.span > 1 || addRowSpan ? {\n    prop: '-ms-grid-row-span',\n    value: String(area.row.span)\n  } : [], {\n    prop: '-ms-grid-column',\n    value: String(area.column.start)\n  }, area.column.span > 1 || addColumnSpan ? {\n    prop: '-ms-grid-column-span',\n    value: String(area.column.span)\n  } : []);\n}\n\nfunction getParentMedia(parent) {\n  if (parent.type === 'atrule' && parent.name === 'media') {\n    return parent;\n  }\n\n  if (!parent.parent) {\n    return false;\n  }\n\n  return getParentMedia(parent.parent);\n}\n/**\n * change selectors for rules with duplicate grid-areas.\n * @param  {Array<Rule>} rules\n * @param  {Array<String>} templateSelectors\n * @return {Array<Rule>} rules with changed selectors\n */\n\n\nfunction changeDuplicateAreaSelectors(ruleSelectors, templateSelectors) {\n  ruleSelectors = ruleSelectors.map(function (selector) {\n    var selectorBySpace = list.space(selector);\n    var selectorByComma = list.comma(selector);\n\n    if (selectorBySpace.length > selectorByComma.length) {\n      selector = selectorBySpace.slice(-1).join('');\n    }\n\n    return selector;\n  });\n  return ruleSelectors.map(function (ruleSelector) {\n    var newSelector = templateSelectors.map(function (tplSelector, index) {\n      var space = index === 0 ? '' : ' ';\n      return \"\" + space + tplSelector + \" > \" + ruleSelector;\n    });\n    return newSelector;\n  });\n}\n/**\n * check if selector of rules are equal\n * @param  {Rule} ruleA\n * @param  {Rule} ruleB\n * @return {Boolean}\n */\n\n\nfunction selectorsEqual(ruleA, ruleB) {\n  return ruleA.selectors.some(function (sel) {\n    return ruleB.selectors.some(function (s) {\n      return s === sel;\n    });\n  });\n}\n/**\n * Parse data from all grid-template(-areas) declarations\n * @param  {Root} css css root\n * @return {Object} parsed data\n */\n\n\nfunction parseGridTemplatesData(css) {\n  var parsed = []; // we walk through every grid-template(-areas) declaration and store\n  // data with the same area names inside the item\n\n  css.walkDecls(/grid-template(-areas)?$/, function (d) {\n    var rule = d.parent;\n    var media = getParentMedia(rule);\n    var gap = getGridGap(d);\n    var inheritedGap = inheritGridGap(d, gap);\n\n    var _parseTemplate = parseTemplate({\n      decl: d,\n      gap: inheritedGap || gap\n    }),\n        areas = _parseTemplate.areas;\n\n    var areaNames = Object.keys(areas); // skip node if it doesn't have areas\n\n    if (areaNames.length === 0) {\n      return true;\n    } // check parsed array for item that include the same area names\n    // return index of that item\n\n\n    var index = parsed.reduce(function (acc, _ref7, idx) {\n      var allAreas = _ref7.allAreas;\n      var hasAreas = allAreas && areaNames.some(function (area) {\n        return allAreas.includes(area);\n      });\n      return hasAreas ? idx : acc;\n    }, null);\n\n    if (index !== null) {\n      // index is found, add the grid-template data to that item\n      var _parsed$index = parsed[index],\n          allAreas = _parsed$index.allAreas,\n          rules = _parsed$index.rules; // check if rule has no duplicate area names\n\n      var hasNoDuplicates = rules.some(function (r) {\n        return r.hasDuplicates === false && selectorsEqual(r, rule);\n      });\n      var duplicatesFound = false; // check need to gather all duplicate area names\n\n      var duplicateAreaNames = rules.reduce(function (acc, r) {\n        if (!r.params && selectorsEqual(r, rule)) {\n          duplicatesFound = true;\n          return r.duplicateAreaNames;\n        }\n\n        if (!duplicatesFound) {\n          areaNames.forEach(function (name) {\n            if (r.areas[name]) {\n              acc.push(name);\n            }\n          });\n        }\n\n        return uniq(acc);\n      }, []); // update grid-row/column-span values for areas with duplicate\n      // area names. @see #1084 and #1146\n\n      rules.forEach(function (r) {\n        areaNames.forEach(function (name) {\n          var area = r.areas[name];\n\n          if (area && area.row.span !== areas[name].row.span) {\n            areas[name].row.updateSpan = true;\n          }\n\n          if (area && area.column.span !== areas[name].column.span) {\n            areas[name].column.updateSpan = true;\n          }\n        });\n      });\n      parsed[index].allAreas = uniq([].concat(allAreas, areaNames));\n      parsed[index].rules.push({\n        hasDuplicates: !hasNoDuplicates,\n        params: media.params,\n        selectors: rule.selectors,\n        node: rule,\n        duplicateAreaNames: duplicateAreaNames,\n        areas: areas\n      });\n    } else {\n      // index is NOT found, push the new item to the parsed array\n      parsed.push({\n        allAreas: areaNames,\n        areasCount: 0,\n        rules: [{\n          hasDuplicates: false,\n          duplicateRules: [],\n          params: media.params,\n          selectors: rule.selectors,\n          node: rule,\n          duplicateAreaNames: [],\n          areas: areas\n        }]\n      });\n    }\n\n    return undefined;\n  });\n  return parsed;\n}\n/**\n * insert prefixed grid-area declarations\n * @param  {Root}  css css root\n * @param  {Function} isDisabled check if the rule is disabled\n * @return {void}\n */\n\n\nfunction insertAreas(css, isDisabled) {\n  // parse grid-template declarations\n  var gridTemplatesData = parseGridTemplatesData(css); // return undefined if no declarations found\n\n  if (gridTemplatesData.length === 0) {\n    return undefined;\n  } // we need to store the rules that we will insert later\n\n\n  var rulesToInsert = {};\n  css.walkDecls('grid-area', function (gridArea) {\n    var gridAreaRule = gridArea.parent;\n    var hasPrefixedRow = gridAreaRule.first.prop === '-ms-grid-row';\n    var gridAreaMedia = getParentMedia(gridAreaRule);\n\n    if (isDisabled(gridArea)) {\n      return undefined;\n    }\n\n    var gridAreaRuleIndex = gridAreaMedia ? css.index(gridAreaMedia) : css.index(gridAreaRule);\n    var value = gridArea.value; // found the data that matches grid-area identifier\n\n    var data = gridTemplatesData.filter(function (d) {\n      return d.allAreas.includes(value);\n    })[0];\n\n    if (!data) {\n      return true;\n    }\n\n    var lastArea = data.allAreas[data.allAreas.length - 1];\n    var selectorBySpace = list.space(gridAreaRule.selector);\n    var selectorByComma = list.comma(gridAreaRule.selector);\n    var selectorIsComplex = selectorBySpace.length > 1 && selectorBySpace.length > selectorByComma.length; // prevent doubling of prefixes\n\n    if (hasPrefixedRow) {\n      return false;\n    } // create the empty object with the key as the last area name\n    // e.g if we have templates with \"a b c\" values, \"c\" will be the last area\n\n\n    if (!rulesToInsert[lastArea]) {\n      rulesToInsert[lastArea] = {};\n    }\n\n    var lastRuleIsSet = false; // walk through every grid-template rule data\n\n    for (var _iterator2 = _createForOfIteratorHelperLoose(data.rules), _step2; !(_step2 = _iterator2()).done;) {\n      var rule = _step2.value;\n      var area = rule.areas[value];\n      var hasDuplicateName = rule.duplicateAreaNames.includes(value); // if we can't find the area name, update lastRule and continue\n\n      if (!area) {\n        var lastRuleIndex = css.index(rulesToInsert[lastArea].lastRule);\n\n        if (gridAreaRuleIndex > lastRuleIndex) {\n          rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule;\n        }\n\n        continue;\n      } // for grid-templates inside media rule we need to create empty\n      // array to push prefixed grid-area rules later\n\n\n      if (rule.params && !rulesToInsert[lastArea][rule.params]) {\n        rulesToInsert[lastArea][rule.params] = [];\n      }\n\n      if ((!rule.hasDuplicates || !hasDuplicateName) && !rule.params) {\n        // grid-template has no duplicates and not inside media rule\n        getMSDecls(area, false, false).reverse().forEach(function (i) {\n          return gridAreaRule.prepend(Object.assign(i, {\n            raws: {\n              between: gridArea.raws.between\n            }\n          }));\n        });\n        rulesToInsert[lastArea].lastRule = gridAreaRule;\n        lastRuleIsSet = true;\n      } else if (rule.hasDuplicates && !rule.params && !selectorIsComplex) {\n        (function () {\n          // grid-template has duplicates and not inside media rule\n          var cloned = gridAreaRule.clone();\n          cloned.removeAll();\n          getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach(function (i) {\n            return cloned.prepend(Object.assign(i, {\n              raws: {\n                between: gridArea.raws.between\n              }\n            }));\n          });\n          cloned.selectors = changeDuplicateAreaSelectors(cloned.selectors, rule.selectors);\n\n          if (rulesToInsert[lastArea].lastRule) {\n            rulesToInsert[lastArea].lastRule.after(cloned);\n          }\n\n          rulesToInsert[lastArea].lastRule = cloned;\n          lastRuleIsSet = true;\n        })();\n      } else if (rule.hasDuplicates && !rule.params && selectorIsComplex && gridAreaRule.selector.includes(rule.selectors[0])) {\n        // grid-template has duplicates and not inside media rule\n        // and the selector is complex\n        gridAreaRule.walkDecls(/-ms-grid-(row|column)/, function (d) {\n          return d.remove();\n        });\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach(function (i) {\n          return gridAreaRule.prepend(Object.assign(i, {\n            raws: {\n              between: gridArea.raws.between\n            }\n          }));\n        });\n      } else if (rule.params) {\n        (function () {\n          // grid-template is inside media rule\n          // if we're inside media rule, we need to store prefixed rules\n          // inside rulesToInsert object to be able to preserve the order of media\n          // rules and merge them easily\n          var cloned = gridAreaRule.clone();\n          cloned.removeAll();\n          getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach(function (i) {\n            return cloned.prepend(Object.assign(i, {\n              raws: {\n                between: gridArea.raws.between\n              }\n            }));\n          });\n\n          if (rule.hasDuplicates && hasDuplicateName) {\n            cloned.selectors = changeDuplicateAreaSelectors(cloned.selectors, rule.selectors);\n          }\n\n          cloned.raws = rule.node.raws;\n\n          if (css.index(rule.node.parent) > gridAreaRuleIndex) {\n            // append the prefixed rules right inside media rule\n            // with grid-template\n            rule.node.parent.append(cloned);\n          } else {\n            // store the rule to insert later\n            rulesToInsert[lastArea][rule.params].push(cloned);\n          } // set new rule as last rule ONLY if we didn't set lastRule for\n          // this grid-area before\n\n\n          if (!lastRuleIsSet) {\n            rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule;\n          }\n        })();\n      }\n    }\n\n    return undefined;\n  }); // append stored rules inside the media rules\n\n  Object.keys(rulesToInsert).forEach(function (area) {\n    var data = rulesToInsert[area];\n    var lastRule = data.lastRule;\n    Object.keys(data).reverse().filter(function (p) {\n      return p !== 'lastRule';\n    }).forEach(function (params) {\n      if (data[params].length > 0 && lastRule) {\n        lastRule.after({\n          name: 'media',\n          params: params\n        });\n        lastRule.next().append(data[params]);\n      }\n    });\n  });\n  return undefined;\n}\n/**\n * Warn user if grid area identifiers are not found\n * @param  {Object} areas\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\n\n\nfunction warnMissedAreas(areas, decl, result) {\n  var missed = Object.keys(areas);\n  decl.root().walkDecls('grid-area', function (gridArea) {\n    missed = missed.filter(function (e) {\n      return e !== gridArea.value;\n    });\n  });\n\n  if (missed.length > 0) {\n    decl.warn(result, 'Can not find grid areas: ' + missed.join(', '));\n  }\n\n  return undefined;\n}\n/**\n * compare selectors with grid-area rule and grid-template rule\n * show warning if grid-template selector is not found\n * (this function used for grid-area rule)\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\n\n\nfunction warnTemplateSelectorNotFound(decl, result) {\n  var rule = decl.parent;\n  var root = decl.root();\n  var duplicatesFound = false; // slice selector array. Remove the last part (for comparison)\n\n  var slicedSelectorArr = list.space(rule.selector).filter(function (str) {\n    return str !== '>';\n  }).slice(0, -1); // we need to compare only if selector is complex.\n  // e.g '.grid-cell' is simple, but '.parent > .grid-cell' is complex\n\n  if (slicedSelectorArr.length > 0) {\n    var gridTemplateFound = false;\n    var foundAreaSelector = null;\n    root.walkDecls(/grid-template(-areas)?$/, function (d) {\n      var parent = d.parent;\n      var templateSelectors = parent.selectors;\n\n      var _parseTemplate2 = parseTemplate({\n        decl: d,\n        gap: getGridGap(d)\n      }),\n          areas = _parseTemplate2.areas;\n\n      var hasArea = areas[decl.value]; // find the the matching selectors\n\n      for (var _iterator3 = _createForOfIteratorHelperLoose(templateSelectors), _step3; !(_step3 = _iterator3()).done;) {\n        var tplSelector = _step3.value;\n\n        if (gridTemplateFound) {\n          break;\n        }\n\n        var tplSelectorArr = list.space(tplSelector).filter(function (str) {\n          return str !== '>';\n        });\n        gridTemplateFound = tplSelectorArr.every(function (item, idx) {\n          return item === slicedSelectorArr[idx];\n        });\n      }\n\n      if (gridTemplateFound || !hasArea) {\n        return true;\n      }\n\n      if (!foundAreaSelector) {\n        foundAreaSelector = parent.selector;\n      } // if we found the duplicate area with different selector\n\n\n      if (foundAreaSelector && foundAreaSelector !== parent.selector) {\n        duplicatesFound = true;\n      }\n\n      return undefined;\n    }); // warn user if we didn't find template\n\n    if (!gridTemplateFound && duplicatesFound) {\n      decl.warn(result, 'Autoprefixer cannot find a grid-template ' + (\"containing the duplicate grid-area \\\"\" + decl.value + \"\\\" \") + (\"with full selector matching: \" + slicedSelectorArr.join(' ')));\n    }\n  }\n}\n/**\n * warn user if both grid-area and grid-(row|column)\n * declarations are present in the same rule\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\n\n\nfunction warnIfGridRowColumnExists(decl, result) {\n  var rule = decl.parent;\n  var decls = [];\n  rule.walkDecls(/^grid-(row|column)/, function (d) {\n    if (!d.prop.endsWith('-end') && !d.value.startsWith('span')) {\n      decls.push(d);\n    }\n  });\n\n  if (decls.length > 0) {\n    decls.forEach(function (d) {\n      d.warn(result, 'You already have a grid-area declaration present in the rule. ' + (\"You should use either grid-area or \" + d.prop + \", not both\"));\n    });\n  }\n\n  return undefined;\n} // Gap utils\n\n\nfunction getGridGap(decl) {\n  var gap = {}; // try to find gap\n\n  var testGap = /^(grid-)?((row|column)-)?gap$/;\n  decl.parent.walkDecls(testGap, function (_ref8) {\n    var prop = _ref8.prop,\n        value = _ref8.value;\n\n    if (/^(grid-)?gap$/.test(prop)) {\n      var _parser$nodes = parser(value).nodes,\n          row = _parser$nodes[0],\n          column = _parser$nodes[2];\n      gap.row = row && parser.stringify(row);\n      gap.column = column ? parser.stringify(column) : gap.row;\n    }\n\n    if (/^(grid-)?row-gap$/.test(prop)) gap.row = value;\n    if (/^(grid-)?column-gap$/.test(prop)) gap.column = value;\n  });\n  return gap;\n}\n/**\n * parse media parameters (for example 'min-width: 500px')\n * @param  {String} params parameter to parse\n * @return {}\n */\n\n\nfunction parseMediaParams(params) {\n  if (!params) {\n    return false;\n  }\n\n  var parsed = parser(params);\n  var prop;\n  var value;\n  parsed.walk(function (node) {\n    if (node.type === 'word' && /min|max/g.test(node.value)) {\n      prop = node.value;\n    } else if (node.value.includes('px')) {\n      value = parseInt(node.value.replace(/\\D/g, ''));\n    }\n  });\n  return [prop, value];\n}\n/**\n * Compare the selectors and decide if we\n * need to inherit gap from compared selector or not.\n * @type {String} selA\n * @type {String} selB\n * @return {Boolean}\n */\n\n\nfunction shouldInheritGap(selA, selB) {\n  var result; // get arrays of selector split in 3-deep array\n\n  var splitSelectorArrA = splitSelector(selA);\n  var splitSelectorArrB = splitSelector(selB);\n\n  if (splitSelectorArrA[0].length < splitSelectorArrB[0].length) {\n    // abort if selectorA has lower descendant specificity then selectorB\n    // (e.g '.grid' and '.hello .world .grid')\n    return false;\n  } else if (splitSelectorArrA[0].length > splitSelectorArrB[0].length) {\n    // if selectorA has higher descendant specificity then selectorB\n    // (e.g '.foo .bar .grid' and '.grid')\n    var idx = splitSelectorArrA[0].reduce(function (res, _ref9, index) {\n      var item = _ref9[0];\n      var firstSelectorPart = splitSelectorArrB[0][0][0];\n\n      if (item === firstSelectorPart) {\n        return index;\n      }\n\n      return false;\n    }, false);\n\n    if (idx) {\n      result = splitSelectorArrB[0].every(function (arr, index) {\n        return arr.every(function (part, innerIndex) {\n          return (// because selectorA has more space elements, we need to slice\n            // selectorA array by 'idx' number to compare them\n            splitSelectorArrA[0].slice(idx)[index][innerIndex] === part\n          );\n        });\n      });\n    }\n  } else {\n    // if selectorA has the same descendant specificity as selectorB\n    // this condition covers cases such as: '.grid.foo.bar' and '.grid'\n    result = splitSelectorArrB.some(function (byCommaArr) {\n      return byCommaArr.every(function (bySpaceArr, index) {\n        return bySpaceArr.every(function (part, innerIndex) {\n          return splitSelectorArrA[0][index][innerIndex] === part;\n        });\n      });\n    });\n  }\n\n  return result;\n}\n/**\n * inherit grid gap values from the closest rule above\n * with the same selector\n * @param  {Declaration} decl\n * @param  {Object} gap gap values\n * @return {Object | Boolean} return gap values or false (if not found)\n */\n\n\nfunction inheritGridGap(decl, gap) {\n  var rule = decl.parent;\n  var mediaRule = getParentMedia(rule);\n  var root = rule.root(); // get an array of selector split in 3-deep array\n\n  var splitSelectorArr = splitSelector(rule.selector); // abort if the rule already has gaps\n\n  if (Object.keys(gap).length > 0) {\n    return false;\n  } // e.g ['min-width']\n\n\n  var _parseMediaParams = parseMediaParams(mediaRule.params),\n      prop = _parseMediaParams[0];\n\n  var lastBySpace = splitSelectorArr[0]; // get escaped value from the selector\n  // if we have '.grid-2.foo.bar' selector, will be '\\.grid\\-2'\n\n  var escaped = escapeRegexp(lastBySpace[lastBySpace.length - 1][0]);\n  var regexp = new RegExp(\"(\" + escaped + \"$)|(\" + escaped + \"[,.])\"); // find the closest rule with the same selector\n\n  var closestRuleGap;\n  root.walkRules(regexp, function (r) {\n    var gridGap; // abort if are checking the same rule\n\n    if (rule.toString() === r.toString()) {\n      return false;\n    } // find grid-gap values\n\n\n    r.walkDecls('grid-gap', function (d) {\n      return gridGap = getGridGap(d);\n    }); // skip rule without gaps\n\n    if (!gridGap || Object.keys(gridGap).length === 0) {\n      return true;\n    } // skip rules that should not be inherited from\n\n\n    if (!shouldInheritGap(rule.selector, r.selector)) {\n      return true;\n    }\n\n    var media = getParentMedia(r);\n\n    if (media) {\n      // if we are inside media, we need to check that media props match\n      // e.g ('min-width' === 'min-width')\n      var propToCompare = parseMediaParams(media.params)[0];\n\n      if (propToCompare === prop) {\n        closestRuleGap = gridGap;\n        return true;\n      }\n    } else {\n      closestRuleGap = gridGap;\n      return true;\n    }\n\n    return undefined;\n  }); // if we find the closest gap object\n\n  if (closestRuleGap && Object.keys(closestRuleGap).length > 0) {\n    return closestRuleGap;\n  }\n\n  return false;\n}\n\nfunction warnGridGap(_ref10) {\n  var gap = _ref10.gap,\n      hasColumns = _ref10.hasColumns,\n      decl = _ref10.decl,\n      result = _ref10.result;\n  var hasBothGaps = gap.row && gap.column;\n\n  if (!hasColumns && (hasBothGaps || gap.column && !gap.row)) {\n    delete gap.column;\n    decl.warn(result, 'Can not implement grid-gap without grid-template-columns');\n  }\n}\n/**\n * normalize the grid-template-rows/columns values\n * @param  {String} str grid-template-rows/columns value\n * @return {Array} normalized array with values\n * @example\n * let normalized = normalizeRowColumn('1fr repeat(2, 20px 50px) 1fr')\n * normalized // <= ['1fr', '20px', '50px', '20px', '50px', '1fr']\n */\n\n\nfunction normalizeRowColumn(str) {\n  var normalized = parser(str).nodes.reduce(function (result, node) {\n    if (node.type === 'function' && node.value === 'repeat') {\n      var key = 'count';\n\n      var _node$nodes$reduce = node.nodes.reduce(function (acc, n) {\n        if (n.type === 'word' && key === 'count') {\n          acc[0] = Math.abs(parseInt(n.value));\n          return acc;\n        }\n\n        if (n.type === 'div' && n.value === ',') {\n          key = 'value';\n          return acc;\n        }\n\n        if (key === 'value') {\n          acc[1] += parser.stringify(n);\n        }\n\n        return acc;\n      }, [0, '']),\n          count = _node$nodes$reduce[0],\n          value = _node$nodes$reduce[1];\n\n      if (count) {\n        for (var i = 0; i < count; i++) {\n          result.push(value);\n        }\n      }\n\n      return result;\n    }\n\n    if (node.type === 'space') {\n      return result;\n    }\n\n    return result.concat(parser.stringify(node));\n  }, []);\n  return normalized;\n}\n/**\n * Autoplace grid items\n * @param {Declaration} decl\n * @param {Result} result\n * @param {Object} gap gap values\n * @param {String} autoflowValue grid-auto-flow value\n * @return {void}\n * @see https://github.com/postcss/autoprefixer/issues/1148\n */\n\n\nfunction autoplaceGridItems(decl, result, gap, autoflowValue) {\n  if (autoflowValue === void 0) {\n    autoflowValue = 'row';\n  }\n\n  var parent = decl.parent;\n  var rowDecl = parent.nodes.find(function (i) {\n    return i.prop === 'grid-template-rows';\n  });\n  var rows = normalizeRowColumn(rowDecl.value);\n  var columns = normalizeRowColumn(decl.value); // Build array of area names with dummy values. If we have 3 columns and\n  // 2 rows, filledRows will be equal to ['1 2 3', '4 5 6']\n\n  var filledRows = rows.map(function (_, rowIndex) {\n    return Array.from({\n      length: columns.length\n    }, function (v, k) {\n      return k + rowIndex * columns.length + 1;\n    }).join(' ');\n  });\n  var areas = parseGridAreas({\n    rows: filledRows,\n    gap: gap\n  });\n  var keys = Object.keys(areas);\n  var items = keys.map(function (i) {\n    return areas[i];\n  }); // Change the order of cells if grid-auto-flow value is 'column'\n\n  if (autoflowValue.includes('column')) {\n    items = items.sort(function (a, b) {\n      return a.column.start - b.column.start;\n    });\n  } // Insert new rules\n\n\n  items.reverse().forEach(function (item, index) {\n    var column = item.column,\n        row = item.row;\n    var nodeSelector = parent.selectors.map(function (sel) {\n      return sel + (\" > *:nth-child(\" + (keys.length - index) + \")\");\n    }).join(', '); // create new rule\n\n    var node = parent.clone().removeAll(); // change rule selector\n\n    node.selector = nodeSelector; // insert prefixed row/column values\n\n    node.append({\n      prop: '-ms-grid-row',\n      value: row.start\n    });\n    node.append({\n      prop: '-ms-grid-column',\n      value: column.start\n    }); // insert rule\n\n    parent.after(node);\n  });\n  return undefined;\n}\n\nmodule.exports = {\n  parse: parse,\n  translate: translate,\n  parseTemplate: parseTemplate,\n  parseGridAreas: parseGridAreas,\n  warnMissedAreas: warnMissedAreas,\n  insertAreas: insertAreas,\n  insertDecl: insertDecl,\n  prefixTrackProp: prefixTrackProp,\n  prefixTrackValue: prefixTrackValue,\n  getGridGap: getGridGap,\n  warnGridGap: warnGridGap,\n  warnTemplateSelectorNotFound: warnTemplateSelectorNotFound,\n  warnIfGridRowColumnExists: warnIfGridRowColumnExists,\n  inheritGridGap: inheritGridGap,\n  autoplaceGridItems: autoplaceGridItems\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}