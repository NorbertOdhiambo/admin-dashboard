{"ast":null,"code":"var _classCallCheck = require(\"C:/Users/HP/Desktop/dashboard/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/HP/Desktop/dashboard/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"C:/Users/HP/Desktop/dashboard/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/HP/Desktop/dashboard/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar transports = require(\"./transports/index\");\n\nvar Emitter = require(\"component-emitter\");\n\nvar debug = require(\"debug\")(\"engine.io-client:socket\");\n\nvar parser = require(\"engine.io-parser\");\n\nvar parseuri = require(\"parseuri\");\n\nvar parseqs = require(\"parseqs\");\n\nvar Socket = /*#__PURE__*/function (_Emitter) {\n  \"use strict\";\n\n  _inherits(Socket, _Emitter);\n\n  var _super = _createSuper(Socket);\n\n  /**\n   * Socket constructor.\n   *\n   * @param {String|Object} uri or options\n   * @param {Object} options\n   * @api public\n   */\n  function Socket(uri) {\n    var _this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Socket);\n\n    _this = _super.call(this);\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n\n    if (uri) {\n      uri = parseuri(uri);\n      opts.hostname = uri.host;\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n      opts.port = uri.port;\n      if (uri.query) opts.query = uri.query;\n    } else if (opts.host) {\n      opts.hostname = parseuri(opts.host).host;\n    }\n\n    _this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = _this.secure ? \"443\" : \"80\";\n    }\n\n    _this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    _this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : _this.secure ? 443 : 80);\n    _this.transports = opts.transports || [\"polling\", \"websocket\"];\n    _this.readyState = \"\";\n    _this.writeBuffer = [];\n    _this.prevBufferLen = 0;\n    _this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: false,\n      withCredentials: false,\n      upgrade: true,\n      jsonp: true,\n      timestampParam: \"t\",\n      rememberUpgrade: false,\n      rejectUnauthorized: true,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {},\n      closeOnBeforeunload: true\n    }, opts);\n    _this.opts.path = _this.opts.path.replace(/\\/$/, \"\") + \"/\";\n\n    if (typeof _this.opts.query === \"string\") {\n      _this.opts.query = parseqs.decode(_this.opts.query);\n    } // set on handshake\n\n\n    _this.id = null;\n    _this.upgrades = null;\n    _this.pingInterval = null;\n    _this.pingTimeout = null; // set on heartbeat\n\n    _this.pingTimeoutTimer = null;\n\n    if (typeof addEventListener === \"function\") {\n      if (_this.opts.closeOnBeforeunload) {\n        // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n        // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n        // closed/reloaded)\n        addEventListener(\"beforeunload\", function () {\n          if (_this.transport) {\n            // silently close the transport\n            _this.transport.removeAllListeners();\n\n            _this.transport.close();\n          }\n        }, false);\n      }\n\n      if (_this.hostname !== \"localhost\") {\n        _this.offlineEventListener = function () {\n          _this.onClose(\"transport close\");\n        };\n\n        addEventListener(\"offline\", _this.offlineEventListener, false);\n      }\n    }\n\n    _this.open();\n\n    return _this;\n  }\n  /**\n   * Creates transport of the given type.\n   *\n   * @param {String} transport name\n   * @return {Transport}\n   * @api private\n   */\n\n\n  _createClass(Socket, [{\n    key: \"createTransport\",\n    value: function createTransport(name) {\n      debug('creating transport \"%s\"', name);\n      var query = clone(this.opts.query); // append engine.io protocol identifier\n\n      query.EIO = parser.protocol; // transport name\n\n      query.transport = name; // session id if we already have one\n\n      if (this.id) query.sid = this.id;\n      var opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n        query: query,\n        socket: this,\n        hostname: this.hostname,\n        secure: this.secure,\n        port: this.port\n      });\n      debug(\"options: %j\", opts);\n      return new transports[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      var _this2 = this;\n\n      var transport;\n\n      if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1) {\n        transport = \"websocket\";\n      } else if (0 === this.transports.length) {\n        // Emit error on next tick so it can be listened to\n        setTimeout(function () {\n          _this2.emit(\"error\", \"No transports available\");\n        }, 0);\n        return;\n      } else {\n        transport = this.transports[0];\n      }\n\n      this.readyState = \"opening\"; // Retry with the next transport if the transport is disabled (jsonp: false)\n\n      try {\n        transport = this.createTransport(transport);\n      } catch (e) {\n        debug(\"error while creating transport: %s\", e);\n        this.transports.shift();\n        this.open();\n        return;\n      }\n\n      transport.open();\n      this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"setTransport\",\n    value: function setTransport(transport) {\n      var _this3 = this;\n\n      debug(\"setting transport %s\", transport.name);\n\n      if (this.transport) {\n        debug(\"clearing existing transport %s\", this.transport.name);\n        this.transport.removeAllListeners();\n      } // set up transport\n\n\n      this.transport = transport; // set up transport listeners\n\n      transport.on(\"drain\", this.onDrain.bind(this)).on(\"packet\", this.onPacket.bind(this)).on(\"error\", this.onError.bind(this)).on(\"close\", function () {\n        _this3.onClose(\"transport close\");\n      });\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} transport name\n     * @api private\n     */\n\n  }, {\n    key: \"probe\",\n    value: function probe(name) {\n      var _this4 = this;\n\n      debug('probing transport \"%s\"', name);\n      var transport = this.createTransport(name, {\n        probe: 1\n      });\n      var failed = false;\n      Socket.priorWebsocketSuccess = false;\n\n      var onTransportOpen = function onTransportOpen() {\n        if (failed) return;\n        debug('probe transport \"%s\" opened', name);\n        transport.send([{\n          type: \"ping\",\n          data: \"probe\"\n        }]);\n        transport.once(\"packet\", function (msg) {\n          if (failed) return;\n\n          if (\"pong\" === msg.type && \"probe\" === msg.data) {\n            debug('probe transport \"%s\" pong', name);\n            _this4.upgrading = true;\n\n            _this4.emit(\"upgrading\", transport);\n\n            if (!transport) return;\n            Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n            debug('pausing current transport \"%s\"', _this4.transport.name);\n\n            _this4.transport.pause(function () {\n              if (failed) return;\n              if (\"closed\" === _this4.readyState) return;\n              debug(\"changing transport and sending upgrade packet\");\n              cleanup();\n\n              _this4.setTransport(transport);\n\n              transport.send([{\n                type: \"upgrade\"\n              }]);\n\n              _this4.emit(\"upgrade\", transport);\n\n              transport = null;\n              _this4.upgrading = false;\n\n              _this4.flush();\n            });\n          } else {\n            debug('probe transport \"%s\" failed', name);\n            var err = new Error(\"probe error\");\n            err.transport = transport.name;\n\n            _this4.emit(\"upgradeError\", err);\n          }\n        });\n      };\n\n      function freezeTransport() {\n        if (failed) return; // Any callback called by transport should be ignored since now\n\n        failed = true;\n        cleanup();\n        transport.close();\n        transport = null;\n      } // Handle any error that happens while probing\n\n\n      var onerror = function onerror(err) {\n        var error = new Error(\"probe error: \" + err);\n        error.transport = transport.name;\n        freezeTransport();\n        debug('probe transport \"%s\" failed because of error: %s', name, err);\n\n        _this4.emit(\"upgradeError\", error);\n      };\n\n      function onTransportClose() {\n        onerror(\"transport closed\");\n      } // When the socket is closed while we're probing\n\n\n      function onclose() {\n        onerror(\"socket closed\");\n      } // When the socket is upgraded while we're probing\n\n\n      function onupgrade(to) {\n        if (transport && to.name !== transport.name) {\n          debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n          freezeTransport();\n        }\n      } // Remove all listeners on the transport and on self\n\n\n      var cleanup = function cleanup() {\n        transport.removeListener(\"open\", onTransportOpen);\n        transport.removeListener(\"error\", onerror);\n        transport.removeListener(\"close\", onTransportClose);\n\n        _this4.removeListener(\"close\", onclose);\n\n        _this4.removeListener(\"upgrading\", onupgrade);\n      };\n\n      transport.once(\"open\", onTransportOpen);\n      transport.once(\"error\", onerror);\n      transport.once(\"close\", onTransportClose);\n      this.once(\"close\", onclose);\n      this.once(\"upgrading\", onupgrade);\n      transport.open();\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @api public\n     */\n\n  }, {\n    key: \"onOpen\",\n    value: function onOpen() {\n      debug(\"socket open\");\n      this.readyState = \"open\";\n      Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n      this.emit(\"open\");\n      this.flush(); // we check for `readyState` in case an `open`\n      // listener already closed the socket\n\n      if (\"open\" === this.readyState && this.opts.upgrade && this.transport.pause) {\n        debug(\"starting upgrade probes\");\n        var i = 0;\n        var l = this.upgrades.length;\n\n        for (; i < l; i++) {\n          this.probe(this.upgrades[i]);\n        }\n      }\n    }\n    /**\n     * Handles a packet.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onPacket\",\n    value: function onPacket(packet) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n        this.emit(\"packet\", packet); // Socket is live - any packet counts\n\n        this.emit(\"heartbeat\");\n\n        switch (packet.type) {\n          case \"open\":\n            this.onHandshake(JSON.parse(packet.data));\n            break;\n\n          case \"ping\":\n            this.resetPingTimeout();\n            this.sendPacket(\"pong\");\n            this.emit(\"ping\");\n            this.emit(\"pong\");\n            break;\n\n          case \"error\":\n            var err = new Error(\"server error\");\n            err.code = packet.data;\n            this.onError(err);\n            break;\n\n          case \"message\":\n            this.emit(\"data\", packet.data);\n            this.emit(\"message\", packet.data);\n            break;\n        }\n      } else {\n        debug('packet received with socket readyState \"%s\"', this.readyState);\n      }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} handshake obj\n     * @api private\n     */\n\n  }, {\n    key: \"onHandshake\",\n    value: function onHandshake(data) {\n      this.emit(\"handshake\", data);\n      this.id = data.sid;\n      this.transport.query.sid = data.sid;\n      this.upgrades = this.filterUpgrades(data.upgrades);\n      this.pingInterval = data.pingInterval;\n      this.pingTimeout = data.pingTimeout;\n      this.onOpen(); // In case open handler closes socket\n\n      if (\"closed\" === this.readyState) return;\n      this.resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"resetPingTimeout\",\n    value: function resetPingTimeout() {\n      var _this5 = this;\n\n      clearTimeout(this.pingTimeoutTimer);\n      this.pingTimeoutTimer = setTimeout(function () {\n        _this5.onClose(\"ping timeout\");\n      }, this.pingInterval + this.pingTimeout);\n\n      if (this.opts.autoUnref) {\n        this.pingTimeoutTimer.unref();\n      }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onDrain\",\n    value: function onDrain() {\n      this.writeBuffer.splice(0, this.prevBufferLen); // setting prevBufferLen = 0 is very important\n      // for example, when upgrading, upgrade packet is sent over,\n      // and a nonzero prevBufferLen could cause problems on `drain`\n\n      this.prevBufferLen = 0;\n\n      if (0 === this.writeBuffer.length) {\n        this.emit(\"drain\");\n      } else {\n        this.flush();\n      }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n        debug(\"flushing %d packets in socket\", this.writeBuffer.length);\n        this.transport.send(this.writeBuffer); // keep track of current length of writeBuffer\n        // splice writeBuffer and callbackBuffer on `drain`\n\n        this.prevBufferLen = this.writeBuffer.length;\n        this.emit(\"flush\");\n      }\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} message.\n     * @param {Function} callback function.\n     * @param {Object} options.\n     * @return {Socket} for chaining.\n     * @api public\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(msg, options, fn) {\n      this.sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n  }, {\n    key: \"send\",\n    value: function send(msg, options, fn) {\n      this.sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} callback function.\n     * @api private\n     */\n\n  }, {\n    key: \"sendPacket\",\n    value: function sendPacket(type, data, options, fn) {\n      if (\"function\" === typeof data) {\n        fn = data;\n        data = undefined;\n      }\n\n      if (\"function\" === typeof options) {\n        fn = options;\n        options = null;\n      }\n\n      if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n        return;\n      }\n\n      options = options || {};\n      options.compress = false !== options.compress;\n      var packet = {\n        type: type,\n        data: data,\n        options: options\n      };\n      this.emit(\"packetCreate\", packet);\n      this.writeBuffer.push(packet);\n      if (fn) this.once(\"flush\", fn);\n      this.flush();\n    }\n    /**\n     * Closes the connection.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this6 = this;\n\n      var close = function close() {\n        _this6.onClose(\"forced close\");\n\n        debug(\"socket closing - telling transport to close\");\n\n        _this6.transport.close();\n      };\n\n      var cleanupAndClose = function cleanupAndClose() {\n        _this6.removeListener(\"upgrade\", cleanupAndClose);\n\n        _this6.removeListener(\"upgradeError\", cleanupAndClose);\n\n        close();\n      };\n\n      var waitForUpgrade = function waitForUpgrade() {\n        // wait for upgrade to finish since we can't send packets while pausing a transport\n        _this6.once(\"upgrade\", cleanupAndClose);\n\n        _this6.once(\"upgradeError\", cleanupAndClose);\n      };\n\n      if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n        this.readyState = \"closing\";\n\n        if (this.writeBuffer.length) {\n          this.once(\"drain\", function () {\n            if (_this6.upgrading) {\n              waitForUpgrade();\n            } else {\n              close();\n            }\n          });\n        } else if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      }\n\n      return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onError\",\n    value: function onError(err) {\n      debug(\"socket error %j\", err);\n      Socket.priorWebsocketSuccess = false;\n      this.emit(\"error\", err);\n      this.onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose(reason, desc) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        debug('socket close with reason: \"%s\"', reason); // clear timers\n\n        clearTimeout(this.pingIntervalTimer);\n        clearTimeout(this.pingTimeoutTimer); // stop event from firing again for transport\n\n        this.transport.removeAllListeners(\"close\"); // ensure transport won't stay open\n\n        this.transport.close(); // ignore further transport communication\n\n        this.transport.removeAllListeners();\n\n        if (typeof removeEventListener === \"function\") {\n          removeEventListener(\"offline\", this.offlineEventListener, false);\n        } // set ready state\n\n\n        this.readyState = \"closed\"; // clear session id\n\n        this.id = null; // emit close event\n\n        this.emit(\"close\", reason, desc); // clean buffers after, so users can still\n        // grab the buffers on `close` event\n\n        this.writeBuffer = [];\n        this.prevBufferLen = 0;\n      }\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} server upgrades\n     * @api private\n     *\n     */\n\n  }, {\n    key: \"filterUpgrades\",\n    value: function filterUpgrades(upgrades) {\n      var filteredUpgrades = [];\n      var i = 0;\n      var j = upgrades.length;\n\n      for (; i < j; i++) {\n        if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n      }\n\n      return filteredUpgrades;\n    }\n  }]);\n\n  return Socket;\n}(Emitter);\n\nSocket.priorWebsocketSuccess = false;\n/**\n * Protocol version.\n *\n * @api public\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\nfunction clone(obj) {\n  var o = {};\n\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n\n  return o;\n}\n\nmodule.exports = Socket;","map":{"version":3,"names":["transports","require","Emitter","debug","parser","parseuri","parseqs","Socket","uri","opts","hostname","host","secure","protocol","port","query","location","readyState","writeBuffer","prevBufferLen","Object","assign","path","agent","withCredentials","upgrade","jsonp","timestampParam","rememberUpgrade","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","closeOnBeforeunload","replace","decode","id","upgrades","pingInterval","pingTimeout","pingTimeoutTimer","addEventListener","transport","removeAllListeners","close","offlineEventListener","onClose","open","name","clone","EIO","sid","socket","priorWebsocketSuccess","indexOf","length","setTimeout","emit","createTransport","e","shift","setTransport","on","onDrain","bind","onPacket","onError","probe","failed","onTransportOpen","send","type","data","once","msg","upgrading","pause","cleanup","flush","err","Error","freezeTransport","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","i","l","packet","onHandshake","JSON","parse","resetPingTimeout","sendPacket","code","filterUpgrades","onOpen","clearTimeout","autoUnref","unref","splice","writable","options","fn","undefined","compress","push","cleanupAndClose","waitForUpgrade","reason","desc","pingIntervalTimer","removeEventListener","filteredUpgrades","j","obj","o","hasOwnProperty","module","exports"],"sources":["C:/Users/HP/Desktop/dashboard/node_modules/engine.io-client/lib/socket.js"],"sourcesContent":["const transports = require(\"./transports/index\");\nconst Emitter = require(\"component-emitter\");\nconst debug = require(\"debug\")(\"engine.io-client:socket\");\nconst parser = require(\"engine.io-parser\");\nconst parseuri = require(\"parseuri\");\nconst parseqs = require(\"parseqs\");\n\nclass Socket extends Emitter {\n  /**\n   * Socket constructor.\n   *\n   * @param {String|Object} uri or options\n   * @param {Object} options\n   * @api public\n   */\n  constructor(uri, opts = {}) {\n    super();\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n\n    if (uri) {\n      uri = parseuri(uri);\n      opts.hostname = uri.host;\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n      opts.port = uri.port;\n      if (uri.query) opts.query = uri.query;\n    } else if (opts.host) {\n      opts.hostname = parseuri(opts.host).host;\n    }\n\n    this.secure =\n      null != opts.secure\n        ? opts.secure\n        : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = this.secure ? \"443\" : \"80\";\n    }\n\n    this.hostname =\n      opts.hostname ||\n      (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    this.port =\n      opts.port ||\n      (typeof location !== \"undefined\" && location.port\n        ? location.port\n        : this.secure\n        ? 443\n        : 80);\n\n    this.transports = opts.transports || [\"polling\", \"websocket\"];\n    this.readyState = \"\";\n    this.writeBuffer = [];\n    this.prevBufferLen = 0;\n\n    this.opts = Object.assign(\n      {\n        path: \"/engine.io\",\n        agent: false,\n        withCredentials: false,\n        upgrade: true,\n        jsonp: true,\n        timestampParam: \"t\",\n        rememberUpgrade: false,\n        rejectUnauthorized: true,\n        perMessageDeflate: {\n          threshold: 1024\n        },\n        transportOptions: {},\n        closeOnBeforeunload: true\n      },\n      opts\n    );\n\n    this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\n\n    if (typeof this.opts.query === \"string\") {\n      this.opts.query = parseqs.decode(this.opts.query);\n    }\n\n    // set on handshake\n    this.id = null;\n    this.upgrades = null;\n    this.pingInterval = null;\n    this.pingTimeout = null;\n\n    // set on heartbeat\n    this.pingTimeoutTimer = null;\n\n    if (typeof addEventListener === \"function\") {\n      if (this.opts.closeOnBeforeunload) {\n        // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n        // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n        // closed/reloaded)\n        addEventListener(\n          \"beforeunload\",\n          () => {\n            if (this.transport) {\n              // silently close the transport\n              this.transport.removeAllListeners();\n              this.transport.close();\n            }\n          },\n          false\n        );\n      }\n      if (this.hostname !== \"localhost\") {\n        this.offlineEventListener = () => {\n          this.onClose(\"transport close\");\n        };\n        addEventListener(\"offline\", this.offlineEventListener, false);\n      }\n    }\n\n    this.open();\n  }\n\n  /**\n   * Creates transport of the given type.\n   *\n   * @param {String} transport name\n   * @return {Transport}\n   * @api private\n   */\n  createTransport(name) {\n    debug('creating transport \"%s\"', name);\n    const query = clone(this.opts.query);\n\n    // append engine.io protocol identifier\n    query.EIO = parser.protocol;\n\n    // transport name\n    query.transport = name;\n\n    // session id if we already have one\n    if (this.id) query.sid = this.id;\n\n    const opts = Object.assign(\n      {},\n      this.opts.transportOptions[name],\n      this.opts,\n      {\n        query,\n        socket: this,\n        hostname: this.hostname,\n        secure: this.secure,\n        port: this.port\n      }\n    );\n\n    debug(\"options: %j\", opts);\n\n    return new transports[name](opts);\n  }\n\n  /**\n   * Initializes transport to use and starts probe.\n   *\n   * @api private\n   */\n  open() {\n    let transport;\n    if (\n      this.opts.rememberUpgrade &&\n      Socket.priorWebsocketSuccess &&\n      this.transports.indexOf(\"websocket\") !== -1\n    ) {\n      transport = \"websocket\";\n    } else if (0 === this.transports.length) {\n      // Emit error on next tick so it can be listened to\n      setTimeout(() => {\n        this.emit(\"error\", \"No transports available\");\n      }, 0);\n      return;\n    } else {\n      transport = this.transports[0];\n    }\n    this.readyState = \"opening\";\n\n    // Retry with the next transport if the transport is disabled (jsonp: false)\n    try {\n      transport = this.createTransport(transport);\n    } catch (e) {\n      debug(\"error while creating transport: %s\", e);\n      this.transports.shift();\n      this.open();\n      return;\n    }\n\n    transport.open();\n    this.setTransport(transport);\n  }\n\n  /**\n   * Sets the current transport. Disables the existing one (if any).\n   *\n   * @api private\n   */\n  setTransport(transport) {\n    debug(\"setting transport %s\", transport.name);\n\n    if (this.transport) {\n      debug(\"clearing existing transport %s\", this.transport.name);\n      this.transport.removeAllListeners();\n    }\n\n    // set up transport\n    this.transport = transport;\n\n    // set up transport listeners\n    transport\n      .on(\"drain\", this.onDrain.bind(this))\n      .on(\"packet\", this.onPacket.bind(this))\n      .on(\"error\", this.onError.bind(this))\n      .on(\"close\", () => {\n        this.onClose(\"transport close\");\n      });\n  }\n\n  /**\n   * Probes a transport.\n   *\n   * @param {String} transport name\n   * @api private\n   */\n  probe(name) {\n    debug('probing transport \"%s\"', name);\n    let transport = this.createTransport(name, { probe: 1 });\n    let failed = false;\n\n    Socket.priorWebsocketSuccess = false;\n\n    const onTransportOpen = () => {\n      if (failed) return;\n\n      debug('probe transport \"%s\" opened', name);\n      transport.send([{ type: \"ping\", data: \"probe\" }]);\n      transport.once(\"packet\", msg => {\n        if (failed) return;\n        if (\"pong\" === msg.type && \"probe\" === msg.data) {\n          debug('probe transport \"%s\" pong', name);\n          this.upgrading = true;\n          this.emit(\"upgrading\", transport);\n          if (!transport) return;\n          Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n\n          debug('pausing current transport \"%s\"', this.transport.name);\n          this.transport.pause(() => {\n            if (failed) return;\n            if (\"closed\" === this.readyState) return;\n            debug(\"changing transport and sending upgrade packet\");\n\n            cleanup();\n\n            this.setTransport(transport);\n            transport.send([{ type: \"upgrade\" }]);\n            this.emit(\"upgrade\", transport);\n            transport = null;\n            this.upgrading = false;\n            this.flush();\n          });\n        } else {\n          debug('probe transport \"%s\" failed', name);\n          const err = new Error(\"probe error\");\n          err.transport = transport.name;\n          this.emit(\"upgradeError\", err);\n        }\n      });\n    };\n\n    function freezeTransport() {\n      if (failed) return;\n\n      // Any callback called by transport should be ignored since now\n      failed = true;\n\n      cleanup();\n\n      transport.close();\n      transport = null;\n    }\n\n    // Handle any error that happens while probing\n    const onerror = err => {\n      const error = new Error(\"probe error: \" + err);\n      error.transport = transport.name;\n\n      freezeTransport();\n\n      debug('probe transport \"%s\" failed because of error: %s', name, err);\n\n      this.emit(\"upgradeError\", error);\n    };\n\n    function onTransportClose() {\n      onerror(\"transport closed\");\n    }\n\n    // When the socket is closed while we're probing\n    function onclose() {\n      onerror(\"socket closed\");\n    }\n\n    // When the socket is upgraded while we're probing\n    function onupgrade(to) {\n      if (transport && to.name !== transport.name) {\n        debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n        freezeTransport();\n      }\n    }\n\n    // Remove all listeners on the transport and on self\n    const cleanup = () => {\n      transport.removeListener(\"open\", onTransportOpen);\n      transport.removeListener(\"error\", onerror);\n      transport.removeListener(\"close\", onTransportClose);\n      this.removeListener(\"close\", onclose);\n      this.removeListener(\"upgrading\", onupgrade);\n    };\n\n    transport.once(\"open\", onTransportOpen);\n    transport.once(\"error\", onerror);\n    transport.once(\"close\", onTransportClose);\n\n    this.once(\"close\", onclose);\n    this.once(\"upgrading\", onupgrade);\n\n    transport.open();\n  }\n\n  /**\n   * Called when connection is deemed open.\n   *\n   * @api public\n   */\n  onOpen() {\n    debug(\"socket open\");\n    this.readyState = \"open\";\n    Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n    this.emit(\"open\");\n    this.flush();\n\n    // we check for `readyState` in case an `open`\n    // listener already closed the socket\n    if (\n      \"open\" === this.readyState &&\n      this.opts.upgrade &&\n      this.transport.pause\n    ) {\n      debug(\"starting upgrade probes\");\n      let i = 0;\n      const l = this.upgrades.length;\n      for (; i < l; i++) {\n        this.probe(this.upgrades[i]);\n      }\n    }\n  }\n\n  /**\n   * Handles a packet.\n   *\n   * @api private\n   */\n  onPacket(packet) {\n    if (\n      \"opening\" === this.readyState ||\n      \"open\" === this.readyState ||\n      \"closing\" === this.readyState\n    ) {\n      debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n\n      this.emit(\"packet\", packet);\n\n      // Socket is live - any packet counts\n      this.emit(\"heartbeat\");\n\n      switch (packet.type) {\n        case \"open\":\n          this.onHandshake(JSON.parse(packet.data));\n          break;\n\n        case \"ping\":\n          this.resetPingTimeout();\n          this.sendPacket(\"pong\");\n          this.emit(\"ping\");\n          this.emit(\"pong\");\n          break;\n\n        case \"error\":\n          const err = new Error(\"server error\");\n          err.code = packet.data;\n          this.onError(err);\n          break;\n\n        case \"message\":\n          this.emit(\"data\", packet.data);\n          this.emit(\"message\", packet.data);\n          break;\n      }\n    } else {\n      debug('packet received with socket readyState \"%s\"', this.readyState);\n    }\n  }\n\n  /**\n   * Called upon handshake completion.\n   *\n   * @param {Object} handshake obj\n   * @api private\n   */\n  onHandshake(data) {\n    this.emit(\"handshake\", data);\n    this.id = data.sid;\n    this.transport.query.sid = data.sid;\n    this.upgrades = this.filterUpgrades(data.upgrades);\n    this.pingInterval = data.pingInterval;\n    this.pingTimeout = data.pingTimeout;\n    this.onOpen();\n    // In case open handler closes socket\n    if (\"closed\" === this.readyState) return;\n    this.resetPingTimeout();\n  }\n\n  /**\n   * Sets and resets ping timeout timer based on server pings.\n   *\n   * @api private\n   */\n  resetPingTimeout() {\n    clearTimeout(this.pingTimeoutTimer);\n    this.pingTimeoutTimer = setTimeout(() => {\n      this.onClose(\"ping timeout\");\n    }, this.pingInterval + this.pingTimeout);\n    if (this.opts.autoUnref) {\n      this.pingTimeoutTimer.unref();\n    }\n  }\n\n  /**\n   * Called on `drain` event\n   *\n   * @api private\n   */\n  onDrain() {\n    this.writeBuffer.splice(0, this.prevBufferLen);\n\n    // setting prevBufferLen = 0 is very important\n    // for example, when upgrading, upgrade packet is sent over,\n    // and a nonzero prevBufferLen could cause problems on `drain`\n    this.prevBufferLen = 0;\n\n    if (0 === this.writeBuffer.length) {\n      this.emit(\"drain\");\n    } else {\n      this.flush();\n    }\n  }\n\n  /**\n   * Flush write buffers.\n   *\n   * @api private\n   */\n  flush() {\n    if (\n      \"closed\" !== this.readyState &&\n      this.transport.writable &&\n      !this.upgrading &&\n      this.writeBuffer.length\n    ) {\n      debug(\"flushing %d packets in socket\", this.writeBuffer.length);\n      this.transport.send(this.writeBuffer);\n      // keep track of current length of writeBuffer\n      // splice writeBuffer and callbackBuffer on `drain`\n      this.prevBufferLen = this.writeBuffer.length;\n      this.emit(\"flush\");\n    }\n  }\n\n  /**\n   * Sends a message.\n   *\n   * @param {String} message.\n   * @param {Function} callback function.\n   * @param {Object} options.\n   * @return {Socket} for chaining.\n   * @api public\n   */\n  write(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n\n  send(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n\n  /**\n   * Sends a packet.\n   *\n   * @param {String} packet type.\n   * @param {String} data.\n   * @param {Object} options.\n   * @param {Function} callback function.\n   * @api private\n   */\n  sendPacket(type, data, options, fn) {\n    if (\"function\" === typeof data) {\n      fn = data;\n      data = undefined;\n    }\n\n    if (\"function\" === typeof options) {\n      fn = options;\n      options = null;\n    }\n\n    if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n      return;\n    }\n\n    options = options || {};\n    options.compress = false !== options.compress;\n\n    const packet = {\n      type: type,\n      data: data,\n      options: options\n    };\n    this.emit(\"packetCreate\", packet);\n    this.writeBuffer.push(packet);\n    if (fn) this.once(\"flush\", fn);\n    this.flush();\n  }\n\n  /**\n   * Closes the connection.\n   *\n   * @api private\n   */\n  close() {\n    const close = () => {\n      this.onClose(\"forced close\");\n      debug(\"socket closing - telling transport to close\");\n      this.transport.close();\n    };\n\n    const cleanupAndClose = () => {\n      this.removeListener(\"upgrade\", cleanupAndClose);\n      this.removeListener(\"upgradeError\", cleanupAndClose);\n      close();\n    };\n\n    const waitForUpgrade = () => {\n      // wait for upgrade to finish since we can't send packets while pausing a transport\n      this.once(\"upgrade\", cleanupAndClose);\n      this.once(\"upgradeError\", cleanupAndClose);\n    };\n\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.readyState = \"closing\";\n\n      if (this.writeBuffer.length) {\n        this.once(\"drain\", () => {\n          if (this.upgrading) {\n            waitForUpgrade();\n          } else {\n            close();\n          }\n        });\n      } else if (this.upgrading) {\n        waitForUpgrade();\n      } else {\n        close();\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Called upon transport error\n   *\n   * @api private\n   */\n  onError(err) {\n    debug(\"socket error %j\", err);\n    Socket.priorWebsocketSuccess = false;\n    this.emit(\"error\", err);\n    this.onClose(\"transport error\", err);\n  }\n\n  /**\n   * Called upon transport close.\n   *\n   * @api private\n   */\n  onClose(reason, desc) {\n    if (\n      \"opening\" === this.readyState ||\n      \"open\" === this.readyState ||\n      \"closing\" === this.readyState\n    ) {\n      debug('socket close with reason: \"%s\"', reason);\n\n      // clear timers\n      clearTimeout(this.pingIntervalTimer);\n      clearTimeout(this.pingTimeoutTimer);\n\n      // stop event from firing again for transport\n      this.transport.removeAllListeners(\"close\");\n\n      // ensure transport won't stay open\n      this.transport.close();\n\n      // ignore further transport communication\n      this.transport.removeAllListeners();\n\n      if (typeof removeEventListener === \"function\") {\n        removeEventListener(\"offline\", this.offlineEventListener, false);\n      }\n\n      // set ready state\n      this.readyState = \"closed\";\n\n      // clear session id\n      this.id = null;\n\n      // emit close event\n      this.emit(\"close\", reason, desc);\n\n      // clean buffers after, so users can still\n      // grab the buffers on `close` event\n      this.writeBuffer = [];\n      this.prevBufferLen = 0;\n    }\n  }\n\n  /**\n   * Filters upgrades, returning only those matching client transports.\n   *\n   * @param {Array} server upgrades\n   * @api private\n   *\n   */\n  filterUpgrades(upgrades) {\n    const filteredUpgrades = [];\n    let i = 0;\n    const j = upgrades.length;\n    for (; i < j; i++) {\n      if (~this.transports.indexOf(upgrades[i]))\n        filteredUpgrades.push(upgrades[i]);\n    }\n    return filteredUpgrades;\n  }\n}\n\nSocket.priorWebsocketSuccess = false;\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\nfunction clone(obj) {\n  const o = {};\n  for (let i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n  return o;\n}\n\nmodule.exports = Socket;\n"],"mappings":";;;;;;;;AAAA,IAAMA,UAAU,GAAGC,OAAO,CAAC,oBAAD,CAA1B;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,mBAAD,CAAvB;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAAP,CAAiB,yBAAjB,CAAd;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,kBAAD,CAAtB;;AACA,IAAMI,QAAQ,GAAGJ,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMK,OAAO,GAAGL,OAAO,CAAC,SAAD,CAAvB;;IAEMM,M;;;;;;;EACJ;AACF;AACA;AACA;AACA;AACA;AACA;EACE,gBAAYC,GAAZ,EAA4B;IAAA;;IAAA,IAAXC,IAAW,uEAAJ,EAAI;;IAAA;;IAC1B;;IAEA,IAAID,GAAG,IAAI,aAAa,OAAOA,GAA/B,EAAoC;MAClCC,IAAI,GAAGD,GAAP;MACAA,GAAG,GAAG,IAAN;IACD;;IAED,IAAIA,GAAJ,EAAS;MACPA,GAAG,GAAGH,QAAQ,CAACG,GAAD,CAAd;MACAC,IAAI,CAACC,QAAL,GAAgBF,GAAG,CAACG,IAApB;MACAF,IAAI,CAACG,MAAL,GAAcJ,GAAG,CAACK,QAAJ,KAAiB,OAAjB,IAA4BL,GAAG,CAACK,QAAJ,KAAiB,KAA3D;MACAJ,IAAI,CAACK,IAAL,GAAYN,GAAG,CAACM,IAAhB;MACA,IAAIN,GAAG,CAACO,KAAR,EAAeN,IAAI,CAACM,KAAL,GAAaP,GAAG,CAACO,KAAjB;IAChB,CAND,MAMO,IAAIN,IAAI,CAACE,IAAT,EAAe;MACpBF,IAAI,CAACC,QAAL,GAAgBL,QAAQ,CAACI,IAAI,CAACE,IAAN,CAAR,CAAoBA,IAApC;IACD;;IAED,MAAKC,MAAL,GACE,QAAQH,IAAI,CAACG,MAAb,GACIH,IAAI,CAACG,MADT,GAEI,OAAOI,QAAP,KAAoB,WAApB,IAAmC,aAAaA,QAAQ,CAACH,QAH/D;;IAKA,IAAIJ,IAAI,CAACC,QAAL,IAAiB,CAACD,IAAI,CAACK,IAA3B,EAAiC;MAC/B;MACAL,IAAI,CAACK,IAAL,GAAY,MAAKF,MAAL,GAAc,KAAd,GAAsB,IAAlC;IACD;;IAED,MAAKF,QAAL,GACED,IAAI,CAACC,QAAL,KACC,OAAOM,QAAP,KAAoB,WAApB,GAAkCA,QAAQ,CAACN,QAA3C,GAAsD,WADvD,CADF;IAGA,MAAKI,IAAL,GACEL,IAAI,CAACK,IAAL,KACC,OAAOE,QAAP,KAAoB,WAApB,IAAmCA,QAAQ,CAACF,IAA5C,GACGE,QAAQ,CAACF,IADZ,GAEG,MAAKF,MAAL,GACA,GADA,GAEA,EALJ,CADF;IAQA,MAAKZ,UAAL,GAAkBS,IAAI,CAACT,UAAL,IAAmB,CAAC,SAAD,EAAY,WAAZ,CAArC;IACA,MAAKiB,UAAL,GAAkB,EAAlB;IACA,MAAKC,WAAL,GAAmB,EAAnB;IACA,MAAKC,aAAL,GAAqB,CAArB;IAEA,MAAKV,IAAL,GAAYW,MAAM,CAACC,MAAP,CACV;MACEC,IAAI,EAAE,YADR;MAEEC,KAAK,EAAE,KAFT;MAGEC,eAAe,EAAE,KAHnB;MAIEC,OAAO,EAAE,IAJX;MAKEC,KAAK,EAAE,IALT;MAMEC,cAAc,EAAE,GANlB;MAOEC,eAAe,EAAE,KAPnB;MAQEC,kBAAkB,EAAE,IARtB;MASEC,iBAAiB,EAAE;QACjBC,SAAS,EAAE;MADM,CATrB;MAYEC,gBAAgB,EAAE,EAZpB;MAaEC,mBAAmB,EAAE;IAbvB,CADU,EAgBVxB,IAhBU,CAAZ;IAmBA,MAAKA,IAAL,CAAUa,IAAV,GAAiB,MAAKb,IAAL,CAAUa,IAAV,CAAeY,OAAf,CAAuB,KAAvB,EAA8B,EAA9B,IAAoC,GAArD;;IAEA,IAAI,OAAO,MAAKzB,IAAL,CAAUM,KAAjB,KAA2B,QAA/B,EAAyC;MACvC,MAAKN,IAAL,CAAUM,KAAV,GAAkBT,OAAO,CAAC6B,MAAR,CAAe,MAAK1B,IAAL,CAAUM,KAAzB,CAAlB;IACD,CAnEyB,CAqE1B;;;IACA,MAAKqB,EAAL,GAAU,IAAV;IACA,MAAKC,QAAL,GAAgB,IAAhB;IACA,MAAKC,YAAL,GAAoB,IAApB;IACA,MAAKC,WAAL,GAAmB,IAAnB,CAzE0B,CA2E1B;;IACA,MAAKC,gBAAL,GAAwB,IAAxB;;IAEA,IAAI,OAAOC,gBAAP,KAA4B,UAAhC,EAA4C;MAC1C,IAAI,MAAKhC,IAAL,CAAUwB,mBAAd,EAAmC;QACjC;QACA;QACA;QACAQ,gBAAgB,CACd,cADc,EAEd,YAAM;UACJ,IAAI,MAAKC,SAAT,EAAoB;YAClB;YACA,MAAKA,SAAL,CAAeC,kBAAf;;YACA,MAAKD,SAAL,CAAeE,KAAf;UACD;QACF,CARa,EASd,KATc,CAAhB;MAWD;;MACD,IAAI,MAAKlC,QAAL,KAAkB,WAAtB,EAAmC;QACjC,MAAKmC,oBAAL,GAA4B,YAAM;UAChC,MAAKC,OAAL,CAAa,iBAAb;QACD,CAFD;;QAGAL,gBAAgB,CAAC,SAAD,EAAY,MAAKI,oBAAjB,EAAuC,KAAvC,CAAhB;MACD;IACF;;IAED,MAAKE,IAAL;;IAvG0B;EAwG3B;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;;WACE,yBAAgBC,IAAhB,EAAsB;MACpB7C,KAAK,CAAC,yBAAD,EAA4B6C,IAA5B,CAAL;MACA,IAAMjC,KAAK,GAAGkC,KAAK,CAAC,KAAKxC,IAAL,CAAUM,KAAX,CAAnB,CAFoB,CAIpB;;MACAA,KAAK,CAACmC,GAAN,GAAY9C,MAAM,CAACS,QAAnB,CALoB,CAOpB;;MACAE,KAAK,CAAC2B,SAAN,GAAkBM,IAAlB,CARoB,CAUpB;;MACA,IAAI,KAAKZ,EAAT,EAAarB,KAAK,CAACoC,GAAN,GAAY,KAAKf,EAAjB;MAEb,IAAM3B,IAAI,GAAGW,MAAM,CAACC,MAAP,CACX,EADW,EAEX,KAAKZ,IAAL,CAAUuB,gBAAV,CAA2BgB,IAA3B,CAFW,EAGX,KAAKvC,IAHM,EAIX;QACEM,KAAK,EAALA,KADF;QAEEqC,MAAM,EAAE,IAFV;QAGE1C,QAAQ,EAAE,KAAKA,QAHjB;QAIEE,MAAM,EAAE,KAAKA,MAJf;QAKEE,IAAI,EAAE,KAAKA;MALb,CAJW,CAAb;MAaAX,KAAK,CAAC,aAAD,EAAgBM,IAAhB,CAAL;MAEA,OAAO,IAAIT,UAAU,CAACgD,IAAD,CAAd,CAAqBvC,IAArB,CAAP;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,gBAAO;MAAA;;MACL,IAAIiC,SAAJ;;MACA,IACE,KAAKjC,IAAL,CAAUmB,eAAV,IACArB,MAAM,CAAC8C,qBADP,IAEA,KAAKrD,UAAL,CAAgBsD,OAAhB,CAAwB,WAAxB,MAAyC,CAAC,CAH5C,EAIE;QACAZ,SAAS,GAAG,WAAZ;MACD,CAND,MAMO,IAAI,MAAM,KAAK1C,UAAL,CAAgBuD,MAA1B,EAAkC;QACvC;QACAC,UAAU,CAAC,YAAM;UACf,MAAI,CAACC,IAAL,CAAU,OAAV,EAAmB,yBAAnB;QACD,CAFS,EAEP,CAFO,CAAV;QAGA;MACD,CANM,MAMA;QACLf,SAAS,GAAG,KAAK1C,UAAL,CAAgB,CAAhB,CAAZ;MACD;;MACD,KAAKiB,UAAL,GAAkB,SAAlB,CAjBK,CAmBL;;MACA,IAAI;QACFyB,SAAS,GAAG,KAAKgB,eAAL,CAAqBhB,SAArB,CAAZ;MACD,CAFD,CAEE,OAAOiB,CAAP,EAAU;QACVxD,KAAK,CAAC,oCAAD,EAAuCwD,CAAvC,CAAL;QACA,KAAK3D,UAAL,CAAgB4D,KAAhB;QACA,KAAKb,IAAL;QACA;MACD;;MAEDL,SAAS,CAACK,IAAV;MACA,KAAKc,YAAL,CAAkBnB,SAAlB;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,sBAAaA,SAAb,EAAwB;MAAA;;MACtBvC,KAAK,CAAC,sBAAD,EAAyBuC,SAAS,CAACM,IAAnC,CAAL;;MAEA,IAAI,KAAKN,SAAT,EAAoB;QAClBvC,KAAK,CAAC,gCAAD,EAAmC,KAAKuC,SAAL,CAAeM,IAAlD,CAAL;QACA,KAAKN,SAAL,CAAeC,kBAAf;MACD,CANqB,CAQtB;;;MACA,KAAKD,SAAL,GAAiBA,SAAjB,CATsB,CAWtB;;MACAA,SAAS,CACNoB,EADH,CACM,OADN,EACe,KAAKC,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CADf,EAEGF,EAFH,CAEM,QAFN,EAEgB,KAAKG,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAFhB,EAGGF,EAHH,CAGM,OAHN,EAGe,KAAKI,OAAL,CAAaF,IAAb,CAAkB,IAAlB,CAHf,EAIGF,EAJH,CAIM,OAJN,EAIe,YAAM;QACjB,MAAI,CAAChB,OAAL,CAAa,iBAAb;MACD,CANH;IAOD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,eAAME,IAAN,EAAY;MAAA;;MACV7C,KAAK,CAAC,wBAAD,EAA2B6C,IAA3B,CAAL;MACA,IAAIN,SAAS,GAAG,KAAKgB,eAAL,CAAqBV,IAArB,EAA2B;QAAEmB,KAAK,EAAE;MAAT,CAA3B,CAAhB;MACA,IAAIC,MAAM,GAAG,KAAb;MAEA7D,MAAM,CAAC8C,qBAAP,GAA+B,KAA/B;;MAEA,IAAMgB,eAAe,GAAG,SAAlBA,eAAkB,GAAM;QAC5B,IAAID,MAAJ,EAAY;QAEZjE,KAAK,CAAC,6BAAD,EAAgC6C,IAAhC,CAAL;QACAN,SAAS,CAAC4B,IAAV,CAAe,CAAC;UAAEC,IAAI,EAAE,MAAR;UAAgBC,IAAI,EAAE;QAAtB,CAAD,CAAf;QACA9B,SAAS,CAAC+B,IAAV,CAAe,QAAf,EAAyB,UAAAC,GAAG,EAAI;UAC9B,IAAIN,MAAJ,EAAY;;UACZ,IAAI,WAAWM,GAAG,CAACH,IAAf,IAAuB,YAAYG,GAAG,CAACF,IAA3C,EAAiD;YAC/CrE,KAAK,CAAC,2BAAD,EAA8B6C,IAA9B,CAAL;YACA,MAAI,CAAC2B,SAAL,GAAiB,IAAjB;;YACA,MAAI,CAAClB,IAAL,CAAU,WAAV,EAAuBf,SAAvB;;YACA,IAAI,CAACA,SAAL,EAAgB;YAChBnC,MAAM,CAAC8C,qBAAP,GAA+B,gBAAgBX,SAAS,CAACM,IAAzD;YAEA7C,KAAK,CAAC,gCAAD,EAAmC,MAAI,CAACuC,SAAL,CAAeM,IAAlD,CAAL;;YACA,MAAI,CAACN,SAAL,CAAekC,KAAf,CAAqB,YAAM;cACzB,IAAIR,MAAJ,EAAY;cACZ,IAAI,aAAa,MAAI,CAACnD,UAAtB,EAAkC;cAClCd,KAAK,CAAC,+CAAD,CAAL;cAEA0E,OAAO;;cAEP,MAAI,CAAChB,YAAL,CAAkBnB,SAAlB;;cACAA,SAAS,CAAC4B,IAAV,CAAe,CAAC;gBAAEC,IAAI,EAAE;cAAR,CAAD,CAAf;;cACA,MAAI,CAACd,IAAL,CAAU,SAAV,EAAqBf,SAArB;;cACAA,SAAS,GAAG,IAAZ;cACA,MAAI,CAACiC,SAAL,GAAiB,KAAjB;;cACA,MAAI,CAACG,KAAL;YACD,CAbD;UAcD,CAtBD,MAsBO;YACL3E,KAAK,CAAC,6BAAD,EAAgC6C,IAAhC,CAAL;YACA,IAAM+B,GAAG,GAAG,IAAIC,KAAJ,CAAU,aAAV,CAAZ;YACAD,GAAG,CAACrC,SAAJ,GAAgBA,SAAS,CAACM,IAA1B;;YACA,MAAI,CAACS,IAAL,CAAU,cAAV,EAA0BsB,GAA1B;UACD;QACF,CA9BD;MA+BD,CApCD;;MAsCA,SAASE,eAAT,GAA2B;QACzB,IAAIb,MAAJ,EAAY,OADa,CAGzB;;QACAA,MAAM,GAAG,IAAT;QAEAS,OAAO;QAEPnC,SAAS,CAACE,KAAV;QACAF,SAAS,GAAG,IAAZ;MACD,CAvDS,CAyDV;;;MACA,IAAMwC,OAAO,GAAG,SAAVA,OAAU,CAAAH,GAAG,EAAI;QACrB,IAAMI,KAAK,GAAG,IAAIH,KAAJ,CAAU,kBAAkBD,GAA5B,CAAd;QACAI,KAAK,CAACzC,SAAN,GAAkBA,SAAS,CAACM,IAA5B;QAEAiC,eAAe;QAEf9E,KAAK,CAAC,kDAAD,EAAqD6C,IAArD,EAA2D+B,GAA3D,CAAL;;QAEA,MAAI,CAACtB,IAAL,CAAU,cAAV,EAA0B0B,KAA1B;MACD,CATD;;MAWA,SAASC,gBAAT,GAA4B;QAC1BF,OAAO,CAAC,kBAAD,CAAP;MACD,CAvES,CAyEV;;;MACA,SAASG,OAAT,GAAmB;QACjBH,OAAO,CAAC,eAAD,CAAP;MACD,CA5ES,CA8EV;;;MACA,SAASI,SAAT,CAAmBC,EAAnB,EAAuB;QACrB,IAAI7C,SAAS,IAAI6C,EAAE,CAACvC,IAAH,KAAYN,SAAS,CAACM,IAAvC,EAA6C;UAC3C7C,KAAK,CAAC,4BAAD,EAA+BoF,EAAE,CAACvC,IAAlC,EAAwCN,SAAS,CAACM,IAAlD,CAAL;UACAiC,eAAe;QAChB;MACF,CApFS,CAsFV;;;MACA,IAAMJ,OAAO,GAAG,SAAVA,OAAU,GAAM;QACpBnC,SAAS,CAAC8C,cAAV,CAAyB,MAAzB,EAAiCnB,eAAjC;QACA3B,SAAS,CAAC8C,cAAV,CAAyB,OAAzB,EAAkCN,OAAlC;QACAxC,SAAS,CAAC8C,cAAV,CAAyB,OAAzB,EAAkCJ,gBAAlC;;QACA,MAAI,CAACI,cAAL,CAAoB,OAApB,EAA6BH,OAA7B;;QACA,MAAI,CAACG,cAAL,CAAoB,WAApB,EAAiCF,SAAjC;MACD,CAND;;MAQA5C,SAAS,CAAC+B,IAAV,CAAe,MAAf,EAAuBJ,eAAvB;MACA3B,SAAS,CAAC+B,IAAV,CAAe,OAAf,EAAwBS,OAAxB;MACAxC,SAAS,CAAC+B,IAAV,CAAe,OAAf,EAAwBW,gBAAxB;MAEA,KAAKX,IAAL,CAAU,OAAV,EAAmBY,OAAnB;MACA,KAAKZ,IAAL,CAAU,WAAV,EAAuBa,SAAvB;MAEA5C,SAAS,CAACK,IAAV;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,kBAAS;MACP5C,KAAK,CAAC,aAAD,CAAL;MACA,KAAKc,UAAL,GAAkB,MAAlB;MACAV,MAAM,CAAC8C,qBAAP,GAA+B,gBAAgB,KAAKX,SAAL,CAAeM,IAA9D;MACA,KAAKS,IAAL,CAAU,MAAV;MACA,KAAKqB,KAAL,GALO,CAOP;MACA;;MACA,IACE,WAAW,KAAK7D,UAAhB,IACA,KAAKR,IAAL,CAAUgB,OADV,IAEA,KAAKiB,SAAL,CAAekC,KAHjB,EAIE;QACAzE,KAAK,CAAC,yBAAD,CAAL;QACA,IAAIsF,CAAC,GAAG,CAAR;QACA,IAAMC,CAAC,GAAG,KAAKrD,QAAL,CAAckB,MAAxB;;QACA,OAAOkC,CAAC,GAAGC,CAAX,EAAcD,CAAC,EAAf,EAAmB;UACjB,KAAKtB,KAAL,CAAW,KAAK9B,QAAL,CAAcoD,CAAd,CAAX;QACD;MACF;IACF;IAED;AACF;AACA;AACA;AACA;;;;WACE,kBAASE,MAAT,EAAiB;MACf,IACE,cAAc,KAAK1E,UAAnB,IACA,WAAW,KAAKA,UADhB,IAEA,cAAc,KAAKA,UAHrB,EAIE;QACAd,KAAK,CAAC,sCAAD,EAAyCwF,MAAM,CAACpB,IAAhD,EAAsDoB,MAAM,CAACnB,IAA7D,CAAL;QAEA,KAAKf,IAAL,CAAU,QAAV,EAAoBkC,MAApB,EAHA,CAKA;;QACA,KAAKlC,IAAL,CAAU,WAAV;;QAEA,QAAQkC,MAAM,CAACpB,IAAf;UACE,KAAK,MAAL;YACE,KAAKqB,WAAL,CAAiBC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAACnB,IAAlB,CAAjB;YACA;;UAEF,KAAK,MAAL;YACE,KAAKuB,gBAAL;YACA,KAAKC,UAAL,CAAgB,MAAhB;YACA,KAAKvC,IAAL,CAAU,MAAV;YACA,KAAKA,IAAL,CAAU,MAAV;YACA;;UAEF,KAAK,OAAL;YACE,IAAMsB,GAAG,GAAG,IAAIC,KAAJ,CAAU,cAAV,CAAZ;YACAD,GAAG,CAACkB,IAAJ,GAAWN,MAAM,CAACnB,IAAlB;YACA,KAAKN,OAAL,CAAaa,GAAb;YACA;;UAEF,KAAK,SAAL;YACE,KAAKtB,IAAL,CAAU,MAAV,EAAkBkC,MAAM,CAACnB,IAAzB;YACA,KAAKf,IAAL,CAAU,SAAV,EAAqBkC,MAAM,CAACnB,IAA5B;YACA;QArBJ;MAuBD,CAnCD,MAmCO;QACLrE,KAAK,CAAC,6CAAD,EAAgD,KAAKc,UAArD,CAAL;MACD;IACF;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,qBAAYuD,IAAZ,EAAkB;MAChB,KAAKf,IAAL,CAAU,WAAV,EAAuBe,IAAvB;MACA,KAAKpC,EAAL,GAAUoC,IAAI,CAACrB,GAAf;MACA,KAAKT,SAAL,CAAe3B,KAAf,CAAqBoC,GAArB,GAA2BqB,IAAI,CAACrB,GAAhC;MACA,KAAKd,QAAL,GAAgB,KAAK6D,cAAL,CAAoB1B,IAAI,CAACnC,QAAzB,CAAhB;MACA,KAAKC,YAAL,GAAoBkC,IAAI,CAAClC,YAAzB;MACA,KAAKC,WAAL,GAAmBiC,IAAI,CAACjC,WAAxB;MACA,KAAK4D,MAAL,GAPgB,CAQhB;;MACA,IAAI,aAAa,KAAKlF,UAAtB,EAAkC;MAClC,KAAK8E,gBAAL;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,4BAAmB;MAAA;;MACjBK,YAAY,CAAC,KAAK5D,gBAAN,CAAZ;MACA,KAAKA,gBAAL,GAAwBgB,UAAU,CAAC,YAAM;QACvC,MAAI,CAACV,OAAL,CAAa,cAAb;MACD,CAFiC,EAE/B,KAAKR,YAAL,GAAoB,KAAKC,WAFM,CAAlC;;MAGA,IAAI,KAAK9B,IAAL,CAAU4F,SAAd,EAAyB;QACvB,KAAK7D,gBAAL,CAAsB8D,KAAtB;MACD;IACF;IAED;AACF;AACA;AACA;AACA;;;;WACE,mBAAU;MACR,KAAKpF,WAAL,CAAiBqF,MAAjB,CAAwB,CAAxB,EAA2B,KAAKpF,aAAhC,EADQ,CAGR;MACA;MACA;;MACA,KAAKA,aAAL,GAAqB,CAArB;;MAEA,IAAI,MAAM,KAAKD,WAAL,CAAiBqC,MAA3B,EAAmC;QACjC,KAAKE,IAAL,CAAU,OAAV;MACD,CAFD,MAEO;QACL,KAAKqB,KAAL;MACD;IACF;IAED;AACF;AACA;AACA;AACA;;;;WACE,iBAAQ;MACN,IACE,aAAa,KAAK7D,UAAlB,IACA,KAAKyB,SAAL,CAAe8D,QADf,IAEA,CAAC,KAAK7B,SAFN,IAGA,KAAKzD,WAAL,CAAiBqC,MAJnB,EAKE;QACApD,KAAK,CAAC,+BAAD,EAAkC,KAAKe,WAAL,CAAiBqC,MAAnD,CAAL;QACA,KAAKb,SAAL,CAAe4B,IAAf,CAAoB,KAAKpD,WAAzB,EAFA,CAGA;QACA;;QACA,KAAKC,aAAL,GAAqB,KAAKD,WAAL,CAAiBqC,MAAtC;QACA,KAAKE,IAAL,CAAU,OAAV;MACD;IACF;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,eAAMiB,GAAN,EAAW+B,OAAX,EAAoBC,EAApB,EAAwB;MACtB,KAAKV,UAAL,CAAgB,SAAhB,EAA2BtB,GAA3B,EAAgC+B,OAAhC,EAAyCC,EAAzC;MACA,OAAO,IAAP;IACD;;;WAED,cAAKhC,GAAL,EAAU+B,OAAV,EAAmBC,EAAnB,EAAuB;MACrB,KAAKV,UAAL,CAAgB,SAAhB,EAA2BtB,GAA3B,EAAgC+B,OAAhC,EAAyCC,EAAzC;MACA,OAAO,IAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,oBAAWnC,IAAX,EAAiBC,IAAjB,EAAuBiC,OAAvB,EAAgCC,EAAhC,EAAoC;MAClC,IAAI,eAAe,OAAOlC,IAA1B,EAAgC;QAC9BkC,EAAE,GAAGlC,IAAL;QACAA,IAAI,GAAGmC,SAAP;MACD;;MAED,IAAI,eAAe,OAAOF,OAA1B,EAAmC;QACjCC,EAAE,GAAGD,OAAL;QACAA,OAAO,GAAG,IAAV;MACD;;MAED,IAAI,cAAc,KAAKxF,UAAnB,IAAiC,aAAa,KAAKA,UAAvD,EAAmE;QACjE;MACD;;MAEDwF,OAAO,GAAGA,OAAO,IAAI,EAArB;MACAA,OAAO,CAACG,QAAR,GAAmB,UAAUH,OAAO,CAACG,QAArC;MAEA,IAAMjB,MAAM,GAAG;QACbpB,IAAI,EAAEA,IADO;QAEbC,IAAI,EAAEA,IAFO;QAGbiC,OAAO,EAAEA;MAHI,CAAf;MAKA,KAAKhD,IAAL,CAAU,cAAV,EAA0BkC,MAA1B;MACA,KAAKzE,WAAL,CAAiB2F,IAAjB,CAAsBlB,MAAtB;MACA,IAAIe,EAAJ,EAAQ,KAAKjC,IAAL,CAAU,OAAV,EAAmBiC,EAAnB;MACR,KAAK5B,KAAL;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,iBAAQ;MAAA;;MACN,IAAMlC,KAAK,GAAG,SAARA,KAAQ,GAAM;QAClB,MAAI,CAACE,OAAL,CAAa,cAAb;;QACA3C,KAAK,CAAC,6CAAD,CAAL;;QACA,MAAI,CAACuC,SAAL,CAAeE,KAAf;MACD,CAJD;;MAMA,IAAMkE,eAAe,GAAG,SAAlBA,eAAkB,GAAM;QAC5B,MAAI,CAACtB,cAAL,CAAoB,SAApB,EAA+BsB,eAA/B;;QACA,MAAI,CAACtB,cAAL,CAAoB,cAApB,EAAoCsB,eAApC;;QACAlE,KAAK;MACN,CAJD;;MAMA,IAAMmE,cAAc,GAAG,SAAjBA,cAAiB,GAAM;QAC3B;QACA,MAAI,CAACtC,IAAL,CAAU,SAAV,EAAqBqC,eAArB;;QACA,MAAI,CAACrC,IAAL,CAAU,cAAV,EAA0BqC,eAA1B;MACD,CAJD;;MAMA,IAAI,cAAc,KAAK7F,UAAnB,IAAiC,WAAW,KAAKA,UAArD,EAAiE;QAC/D,KAAKA,UAAL,GAAkB,SAAlB;;QAEA,IAAI,KAAKC,WAAL,CAAiBqC,MAArB,EAA6B;UAC3B,KAAKkB,IAAL,CAAU,OAAV,EAAmB,YAAM;YACvB,IAAI,MAAI,CAACE,SAAT,EAAoB;cAClBoC,cAAc;YACf,CAFD,MAEO;cACLnE,KAAK;YACN;UACF,CAND;QAOD,CARD,MAQO,IAAI,KAAK+B,SAAT,EAAoB;UACzBoC,cAAc;QACf,CAFM,MAEA;UACLnE,KAAK;QACN;MACF;;MAED,OAAO,IAAP;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,iBAAQmC,GAAR,EAAa;MACX5E,KAAK,CAAC,iBAAD,EAAoB4E,GAApB,CAAL;MACAxE,MAAM,CAAC8C,qBAAP,GAA+B,KAA/B;MACA,KAAKI,IAAL,CAAU,OAAV,EAAmBsB,GAAnB;MACA,KAAKjC,OAAL,CAAa,iBAAb,EAAgCiC,GAAhC;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,iBAAQiC,MAAR,EAAgBC,IAAhB,EAAsB;MACpB,IACE,cAAc,KAAKhG,UAAnB,IACA,WAAW,KAAKA,UADhB,IAEA,cAAc,KAAKA,UAHrB,EAIE;QACAd,KAAK,CAAC,gCAAD,EAAmC6G,MAAnC,CAAL,CADA,CAGA;;QACAZ,YAAY,CAAC,KAAKc,iBAAN,CAAZ;QACAd,YAAY,CAAC,KAAK5D,gBAAN,CAAZ,CALA,CAOA;;QACA,KAAKE,SAAL,CAAeC,kBAAf,CAAkC,OAAlC,EARA,CAUA;;QACA,KAAKD,SAAL,CAAeE,KAAf,GAXA,CAaA;;QACA,KAAKF,SAAL,CAAeC,kBAAf;;QAEA,IAAI,OAAOwE,mBAAP,KAA+B,UAAnC,EAA+C;UAC7CA,mBAAmB,CAAC,SAAD,EAAY,KAAKtE,oBAAjB,EAAuC,KAAvC,CAAnB;QACD,CAlBD,CAoBA;;;QACA,KAAK5B,UAAL,GAAkB,QAAlB,CArBA,CAuBA;;QACA,KAAKmB,EAAL,GAAU,IAAV,CAxBA,CA0BA;;QACA,KAAKqB,IAAL,CAAU,OAAV,EAAmBuD,MAAnB,EAA2BC,IAA3B,EA3BA,CA6BA;QACA;;QACA,KAAK/F,WAAL,GAAmB,EAAnB;QACA,KAAKC,aAAL,GAAqB,CAArB;MACD;IACF;IAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,wBAAekB,QAAf,EAAyB;MACvB,IAAM+E,gBAAgB,GAAG,EAAzB;MACA,IAAI3B,CAAC,GAAG,CAAR;MACA,IAAM4B,CAAC,GAAGhF,QAAQ,CAACkB,MAAnB;;MACA,OAAOkC,CAAC,GAAG4B,CAAX,EAAc5B,CAAC,EAAf,EAAmB;QACjB,IAAI,CAAC,KAAKzF,UAAL,CAAgBsD,OAAhB,CAAwBjB,QAAQ,CAACoD,CAAD,CAAhC,CAAL,EACE2B,gBAAgB,CAACP,IAAjB,CAAsBxE,QAAQ,CAACoD,CAAD,CAA9B;MACH;;MACD,OAAO2B,gBAAP;IACD;;;;EA5oBkBlH,O;;AA+oBrBK,MAAM,CAAC8C,qBAAP,GAA+B,KAA/B;AAEA;AACA;AACA;AACA;AACA;;AAEA9C,MAAM,CAACM,QAAP,GAAkBT,MAAM,CAACS,QAAzB,C,CAAmC;;AAEnC,SAASoC,KAAT,CAAeqE,GAAf,EAAoB;EAClB,IAAMC,CAAC,GAAG,EAAV;;EACA,KAAK,IAAI9B,CAAT,IAAc6B,GAAd,EAAmB;IACjB,IAAIA,GAAG,CAACE,cAAJ,CAAmB/B,CAAnB,CAAJ,EAA2B;MACzB8B,CAAC,CAAC9B,CAAD,CAAD,GAAO6B,GAAG,CAAC7B,CAAD,CAAV;IACD;EACF;;EACD,OAAO8B,CAAP;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiBnH,MAAjB"},"metadata":{},"sourceType":"script"}