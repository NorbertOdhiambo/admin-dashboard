{"ast":null,"code":"import _objectSpread from \"C:/Users/HP/Desktop/dashboard/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"C:/Users/HP/Desktop/dashboard/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/HP/Desktop/dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/HP/Desktop/dashboard/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, isCloseTo, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nvar transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\n\nvar animationTarget = 1000;\nvar id = 0;\n\nfunction createProjectionNode(_ref) {\n  var attachResizeListener = _ref.attachResizeListener,\n      defaultParent = _ref.defaultParent,\n      measureScroll = _ref.measureScroll,\n      checkIsScrollRoot = _ref.checkIsScrollRoot,\n      _resetTransform = _ref.resetTransform;\n  return /*#__PURE__*/function () {\n    function ProjectionNode(elementId) {\n      var _this = this;\n\n      var latestValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n\n      _classCallCheck(this, ProjectionNode);\n\n      /**\n       * A unique ID generated for every projection node.\n       */\n      this.id = id++;\n      /**\n       * An id that represents a unique session instigated by startUpdate.\n       */\n\n      this.animationId = 0;\n      /**\n       * A Set containing all this component's children. This is used to iterate\n       * through the children.\n       *\n       * TODO: This could be faster to iterate as a flat array stored on the root node.\n       */\n\n      this.children = new Set();\n      /**\n       * Options for the node. We use this to configure what kind of layout animations\n       * we should perform (if any).\n       */\n\n      this.options = {};\n      /**\n       * We use this to detect when its safe to shut down part of a projection tree.\n       * We have to keep projecting children for scale correction and relative projection\n       * until all their parents stop performing layout animations.\n       */\n\n      this.isTreeAnimating = false;\n      this.isAnimationBlocked = false;\n      /**\n       * Flag to true if we think this layout has been changed. We can't always know this,\n       * currently we set it to true every time a component renders, or if it has a layoutDependency\n       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n       * and if one node is dirtied, they all are.\n       */\n\n      this.isLayoutDirty = false;\n      /**\n       * Flag to true if we think the projection calculations for this or any\n       * child might need recalculating as a result of an updated transform or layout animation.\n       */\n\n      this.isProjectionDirty = false;\n      /**\n       * Block layout updates for instant layout transitions throughout the tree.\n       */\n\n      this.updateManuallyBlocked = false;\n      this.updateBlockedByResize = false;\n      /**\n       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n       * call.\n       */\n\n      this.isUpdating = false;\n      /**\n       * If this is an SVG element we currently disable projection transforms\n       */\n\n      this.isSVG = false;\n      /**\n       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n       * its projection styles.\n       */\n\n      this.needsReset = false;\n      /**\n       * Flags whether this node should have its transform reset prior to measuring.\n       */\n\n      this.shouldResetTransform = false;\n      /**\n       * An object representing the calculated contextual/accumulated/tree scale.\n       * This will be used to scale calculcated projection transforms, as these are\n       * calculated in screen-space but need to be scaled for elements to layoutly\n       * make it to their calculated destinations.\n       *\n       * TODO: Lazy-init\n       */\n\n      this.treeScale = {\n        x: 1,\n        y: 1\n      };\n      /**\n       *\n       */\n\n      this.eventHandlers = new Map(); // Note: Currently only running on root node\n\n      this.potentialNodes = new Map();\n\n      this.checkUpdateFailed = function () {\n        if (_this.isUpdating) {\n          _this.isUpdating = false;\n\n          _this.clearAllSnapshots();\n        }\n      };\n\n      this.updateProjection = function () {\n        _this.nodes.forEach(resolveTargetDelta);\n\n        _this.nodes.forEach(calcProjection);\n      };\n\n      this.hasProjected = false;\n      this.isVisible = true;\n      this.animationProgress = 0;\n      /**\n       * Shared layout\n       */\n      // TODO Only running on root node\n\n      this.sharedNodes = new Map();\n      this.elementId = elementId;\n      this.latestValues = latestValues;\n      this.root = parent ? parent.root || parent : this;\n      this.path = parent ? [].concat(_toConsumableArray(parent.path), [parent]) : [];\n      this.parent = parent;\n      this.depth = parent ? parent.depth + 1 : 0;\n      elementId && this.root.registerPotentialNode(elementId, this);\n\n      for (var i = 0; i < this.path.length; i++) {\n        this.path[i].shouldResetTransform = true;\n      }\n\n      if (this.root === this) this.nodes = new FlatTree();\n    }\n\n    _createClass(ProjectionNode, [{\n      key: \"addEventListener\",\n      value: function addEventListener(name, handler) {\n        if (!this.eventHandlers.has(name)) {\n          this.eventHandlers.set(name, new SubscriptionManager());\n        }\n\n        return this.eventHandlers.get(name).add(handler);\n      }\n    }, {\n      key: \"notifyListeners\",\n      value: function notifyListeners(name) {\n        var subscriptionManager = this.eventHandlers.get(name);\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify.apply(subscriptionManager, args);\n      }\n    }, {\n      key: \"hasListeners\",\n      value: function hasListeners(name) {\n        return this.eventHandlers.has(name);\n      }\n    }, {\n      key: \"registerPotentialNode\",\n      value: function registerPotentialNode(elementId, node) {\n        this.potentialNodes.set(elementId, node);\n      }\n      /**\n       * Lifecycles\n       */\n\n    }, {\n      key: \"mount\",\n      value: function mount(instance) {\n        var _this2 = this;\n\n        var isLayoutDirty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        var _a;\n\n        if (this.instance) return;\n        this.isSVG = instance instanceof SVGElement && instance.tagName !== \"svg\";\n        this.instance = instance;\n        var _this$options = this.options,\n            layoutId = _this$options.layoutId,\n            layout = _this$options.layout,\n            visualElement = _this$options.visualElement;\n\n        if (visualElement && !visualElement.current) {\n          visualElement.mount(instance);\n        }\n\n        this.root.nodes.add(this);\n        (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n        this.elementId && this.root.potentialNodes.delete(this.elementId);\n\n        if (isLayoutDirty && (layout || layoutId)) {\n          this.isLayoutDirty = true;\n        }\n\n        if (attachResizeListener) {\n          var cancelDelay;\n\n          var resizeUnblockUpdate = function resizeUnblockUpdate() {\n            return _this2.root.updateBlockedByResize = false;\n          };\n\n          attachResizeListener(instance, function () {\n            _this2.root.updateBlockedByResize = true;\n            cancelDelay && cancelDelay();\n            cancelDelay = delay(resizeUnblockUpdate, 250);\n\n            if (globalProjectionState.hasAnimatedSinceResize) {\n              globalProjectionState.hasAnimatedSinceResize = false;\n\n              _this2.nodes.forEach(finishAnimation);\n            }\n          });\n        }\n\n        if (layoutId) {\n          this.root.registerSharedNode(layoutId, this);\n        } // Only register the handler if it requires layout animation\n\n\n        if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n          this.addEventListener(\"didUpdate\", function (_ref2) {\n            var delta = _ref2.delta,\n                hasLayoutChanged = _ref2.hasLayoutChanged,\n                hasRelativeTargetChanged = _ref2.hasRelativeTargetChanged,\n                newLayout = _ref2.layout;\n\n            var _a, _b, _c, _d, _e;\n\n            if (_this2.isTreeAnimationBlocked()) {\n              _this2.target = undefined;\n              _this2.relativeTarget = undefined;\n              return;\n            } // TODO: Check here if an animation exists\n\n\n            var layoutTransition = (_b = (_a = _this2.options.transition) !== null && _a !== void 0 ? _a : visualElement.getDefaultTransition()) !== null && _b !== void 0 ? _b : defaultLayoutTransition;\n\n            var _visualElement$getPro = visualElement.getProps(),\n                onLayoutAnimationStart = _visualElement$getPro.onLayoutAnimationStart,\n                onLayoutAnimationComplete = _visualElement$getPro.onLayoutAnimationComplete;\n            /**\n             * The target layout of the element might stay the same,\n             * but its position relative to its parent has changed.\n             */\n\n\n            var targetChanged = !_this2.targetLayout || !boxEquals(_this2.targetLayout, newLayout) || hasRelativeTargetChanged;\n            /**\n             * If the layout hasn't seemed to have changed, it might be that the\n             * element is visually in the same place in the document but its position\n             * relative to its parent has indeed changed. So here we check for that.\n             */\n\n            var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n\n            if (((_c = _this2.resumeFrom) === null || _c === void 0 ? void 0 : _c.instance) || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !_this2.currentAnimation)) {\n              if (_this2.resumeFrom) {\n                _this2.resumingFrom = _this2.resumeFrom;\n                _this2.resumingFrom.resumingFrom = undefined;\n              }\n\n              _this2.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n\n              var animationOptions = _objectSpread(_objectSpread({}, getValueTransition(layoutTransition, \"layout\")), {}, {\n                onPlay: onLayoutAnimationStart,\n                onComplete: onLayoutAnimationComplete\n              });\n\n              if (visualElement.shouldReduceMotion) {\n                animationOptions.delay = 0;\n                animationOptions.type = false;\n              }\n\n              _this2.startAnimation(animationOptions);\n            } else {\n              /**\n               * If the layout hasn't changed and we have an animation that hasn't started yet,\n               * finish it immediately. Otherwise it will be animating from a location\n               * that was probably never commited to screen and look like a jumpy box.\n               */\n              if (!hasLayoutChanged && _this2.animationProgress === 0) {\n                finishAnimation(_this2);\n              }\n\n              _this2.isLead() && ((_e = (_d = _this2.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d));\n            }\n\n            _this2.targetLayout = newLayout;\n          });\n        }\n      }\n    }, {\n      key: \"unmount\",\n      value: function unmount() {\n        var _a, _b;\n\n        this.options.layoutId && this.willUpdate();\n        this.root.nodes.remove(this);\n        (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n        (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n        this.instance = undefined;\n        cancelSync.preRender(this.updateProjection);\n      } // only on the root\n\n    }, {\n      key: \"blockUpdate\",\n      value: function blockUpdate() {\n        this.updateManuallyBlocked = true;\n      }\n    }, {\n      key: \"unblockUpdate\",\n      value: function unblockUpdate() {\n        this.updateManuallyBlocked = false;\n      }\n    }, {\n      key: \"isUpdateBlocked\",\n      value: function isUpdateBlocked() {\n        return this.updateManuallyBlocked || this.updateBlockedByResize;\n      }\n    }, {\n      key: \"isTreeAnimationBlocked\",\n      value: function isTreeAnimationBlocked() {\n        var _a;\n\n        return this.isAnimationBlocked || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) || false;\n      } // Note: currently only running on root node\n\n    }, {\n      key: \"startUpdate\",\n      value: function startUpdate() {\n        var _a;\n\n        if (this.isUpdateBlocked()) return;\n        this.isUpdating = true;\n        (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n        this.animationId++;\n      }\n    }, {\n      key: \"willUpdate\",\n      value: function willUpdate() {\n        var shouldNotifyListeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n        var _a, _b, _c;\n\n        if (this.root.isUpdateBlocked()) {\n          (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n          return;\n        }\n\n        !this.root.isUpdating && this.root.startUpdate();\n        if (this.isLayoutDirty) return;\n        this.isLayoutDirty = true;\n\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          node.shouldResetTransform = true;\n          node.updateScroll(\"snapshot\");\n        }\n\n        var _this$options2 = this.options,\n            layoutId = _this$options2.layoutId,\n            layout = _this$options2.layout;\n        if (layoutId === undefined && !layout) return;\n        var transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n        this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n        this.updateSnapshot();\n        shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n      } // Note: Currently only running on root node\n\n    }, {\n      key: \"didUpdate\",\n      value: function didUpdate() {\n        var updateWasBlocked = this.isUpdateBlocked(); // When doing an instant transition, we skip the layout update,\n        // but should still clean up the measurements so that the next\n        // snapshot could be taken correctly.\n\n        if (updateWasBlocked) {\n          this.unblockUpdate();\n          this.clearAllSnapshots();\n          this.nodes.forEach(clearMeasurements);\n          return;\n        }\n\n        if (!this.isUpdating) return;\n        this.isUpdating = false;\n        /**\n         * Search for and mount newly-added projection elements.\n         *\n         * TODO: Every time a new component is rendered we could search up the tree for\n         * the closest mounted node and query from there rather than document.\n         */\n\n        if (this.potentialNodes.size) {\n          this.potentialNodes.forEach(mountNodeEarly);\n          this.potentialNodes.clear();\n        }\n        /**\n         * Write\n         */\n\n\n        this.nodes.forEach(resetTransformStyle);\n        /**\n         * Read ==================\n         */\n        // Update layout measurements of updated children\n\n        this.nodes.forEach(updateLayout);\n        /**\n         * Write\n         */\n        // Notify listeners that the layout is updated\n\n        this.nodes.forEach(notifyLayoutUpdate);\n        this.clearAllSnapshots(); // Flush any scheduled updates\n\n        flushSync.update();\n        flushSync.preRender();\n        flushSync.render();\n      }\n    }, {\n      key: \"clearAllSnapshots\",\n      value: function clearAllSnapshots() {\n        this.nodes.forEach(clearSnapshot);\n        this.sharedNodes.forEach(removeLeadSnapshots);\n      }\n    }, {\n      key: \"scheduleUpdateProjection\",\n      value: function scheduleUpdateProjection() {\n        sync.preRender(this.updateProjection, false, true);\n      }\n    }, {\n      key: \"scheduleCheckAfterUnmount\",\n      value: function scheduleCheckAfterUnmount() {\n        var _this3 = this;\n\n        /**\n         * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n         * we manually call didUpdate to give a chance to the siblings to animate.\n         * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n         */\n        sync.postRender(function () {\n          if (_this3.isLayoutDirty) {\n            _this3.root.didUpdate();\n          } else {\n            _this3.root.checkUpdateFailed();\n          }\n        });\n      }\n      /**\n       * Update measurements\n       */\n\n    }, {\n      key: \"updateSnapshot\",\n      value: function updateSnapshot() {\n        if (this.snapshot || !this.instance) return;\n        this.snapshot = this.measure();\n      }\n    }, {\n      key: \"updateLayout\",\n      value: function updateLayout() {\n        var _a;\n\n        if (!this.instance) return; // TODO: Incorporate into a forwarded scroll offset\n\n        this.updateScroll();\n\n        if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n          return;\n        }\n        /**\n         * When a node is mounted, it simply resumes from the prevLead's\n         * snapshot instead of taking a new one, but the ancestors scroll\n         * might have updated while the prevLead is unmounted. We need to\n         * update the scroll again to make sure the layout we measure is\n         * up to date.\n         */\n\n\n        if (this.resumeFrom && !this.resumeFrom.instance) {\n          for (var i = 0; i < this.path.length; i++) {\n            var node = this.path[i];\n            node.updateScroll();\n          }\n        }\n\n        var prevLayout = this.layout;\n        this.layout = this.measure(false);\n        this.layoutCorrected = createBox();\n        this.isLayoutDirty = false;\n        this.projectionDelta = undefined;\n        this.notifyListeners(\"measure\", this.layout.layoutBox);\n        (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.layoutBox);\n      }\n    }, {\n      key: \"updateScroll\",\n      value: function updateScroll() {\n        var phase = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"measure\";\n        var needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n\n        if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {\n          needsMeasurement = false;\n        }\n\n        if (needsMeasurement) {\n          this.scroll = {\n            animationId: this.root.animationId,\n            phase: phase,\n            isRoot: checkIsScrollRoot(this.instance),\n            offset: measureScroll(this.instance)\n          };\n        }\n      }\n    }, {\n      key: \"resetTransform\",\n      value: function resetTransform() {\n        var _a;\n\n        if (!_resetTransform) return;\n        var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n        var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n        var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n        var transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n        var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n\n        if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n          _resetTransform(this.instance, transformTemplateValue);\n\n          this.shouldResetTransform = false;\n          this.scheduleRender();\n        }\n      }\n    }, {\n      key: \"measure\",\n      value: function measure() {\n        var removeTransform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n        var _a;\n\n        var pageBox = this.measurePageBox();\n        var layoutBox = this.removeElementScroll(pageBox);\n        /**\n         * Measurements taken during the pre-render stage\n         * still have transforms applied so we remove them\n         * via calculation.\n         */\n\n        if (removeTransform) {\n          layoutBox = this.removeTransform(layoutBox);\n        }\n\n        roundBox(layoutBox);\n        var positionStyle = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.readValue(\"position\");\n        var position = positionStyle === \"fixed\" || positionStyle === \"sticky\" ? positionStyle : \"static\";\n        return {\n          animationId: this.root.animationId,\n          measuredBox: pageBox,\n          layoutBox: layoutBox,\n          latestValues: {},\n          source: this.id,\n          position: position\n        };\n      }\n    }, {\n      key: \"measurePageBox\",\n      value: function measurePageBox() {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return createBox();\n        var box = visualElement.measureViewportBox(); // Remove viewport scroll to give page-relative coordinates\n\n        var scroll = this.root.scroll;\n\n        if (scroll) {\n          translateAxis(box.x, scroll.offset.x);\n          translateAxis(box.y, scroll.offset.y);\n        }\n\n        return box;\n      }\n    }, {\n      key: \"removeElementScroll\",\n      value: function removeElementScroll(box) {\n        var boxWithoutScroll = createBox();\n        copyBoxInto(boxWithoutScroll, box);\n        /**\n         * Performance TODO: Keep a cumulative scroll offset down the tree\n         * rather than loop back up the path.\n         */\n\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          var scroll = node.scroll,\n              options = node.options;\n\n          if (node !== this.root && scroll && options.layoutScroll) {\n            /**\n             * If this is a new scroll root, we want to remove all previous scrolls\n             * from the viewport box.\n             */\n            if (scroll.isRoot) {\n              copyBoxInto(boxWithoutScroll, box);\n              var rootScroll = this.root.scroll;\n              /**\n               * Undo the application of page scroll that was originally added\n               * to the measured bounding box.\n               */\n\n              if (rootScroll) {\n                translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n              }\n            }\n\n            translateAxis(boxWithoutScroll.x, scroll.offset.x);\n            translateAxis(boxWithoutScroll.y, scroll.offset.y);\n          }\n        }\n\n        return boxWithoutScroll;\n      }\n    }, {\n      key: \"applyTransform\",\n      value: function applyTransform(box) {\n        var transformOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var withTransforms = createBox();\n        copyBoxInto(withTransforms, box);\n\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n\n          if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n            transformBox(withTransforms, {\n              x: -node.scroll.offset.x,\n              y: -node.scroll.offset.y\n            });\n          }\n\n          if (!hasTransform(node.latestValues)) continue;\n          transformBox(withTransforms, node.latestValues);\n        }\n\n        if (hasTransform(this.latestValues)) {\n          transformBox(withTransforms, this.latestValues);\n        }\n\n        return withTransforms;\n      }\n    }, {\n      key: \"removeTransform\",\n      value: function removeTransform(box) {\n        var _a;\n\n        var boxWithoutTransform = createBox();\n        copyBoxInto(boxWithoutTransform, box);\n\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          if (!node.instance) continue;\n          if (!hasTransform(node.latestValues)) continue;\n          hasScale(node.latestValues) && node.updateSnapshot();\n          var sourceBox = createBox();\n          var nodeBox = node.measurePageBox();\n          copyBoxInto(sourceBox, nodeBox);\n          removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layoutBox, sourceBox);\n        }\n\n        if (hasTransform(this.latestValues)) {\n          removeBoxTransforms(boxWithoutTransform, this.latestValues);\n        }\n\n        return boxWithoutTransform;\n      }\n      /**\n       *\n       */\n\n    }, {\n      key: \"setTargetDelta\",\n      value: function setTargetDelta(delta) {\n        this.targetDelta = delta;\n        this.isProjectionDirty = true;\n        this.root.scheduleUpdateProjection();\n      }\n    }, {\n      key: \"setOptions\",\n      value: function setOptions(options) {\n        this.options = _objectSpread(_objectSpread(_objectSpread({}, this.options), options), {}, {\n          crossfade: options.crossfade !== undefined ? options.crossfade : true\n        });\n      }\n    }, {\n      key: \"clearMeasurements\",\n      value: function clearMeasurements() {\n        this.scroll = undefined;\n        this.layout = undefined;\n        this.snapshot = undefined;\n        this.prevTransformTemplateValue = undefined;\n        this.targetDelta = undefined;\n        this.target = undefined;\n        this.isLayoutDirty = false;\n      }\n      /**\n       * Frame calculations\n       */\n\n    }, {\n      key: \"resolveTargetDelta\",\n      value: function resolveTargetDelta() {\n        var _a;\n        /**\n         * Propagate isProjectionDirty. Nodes are ordered by depth, so if the parent here\n         * is dirty we can simply pass this forward.\n         */\n\n\n        this.isProjectionDirty || (this.isProjectionDirty = this.getLead().isProjectionDirty || Boolean(this.parent && this.parent.isProjectionDirty));\n        if (!this.isProjectionDirty) return;\n        var _this$options3 = this.options,\n            layout = _this$options3.layout,\n            layoutId = _this$options3.layoutId;\n        /**\n         * If we have no layout, we can't perform projection, so early return\n         */\n\n        if (!this.layout || !(layout || layoutId)) return;\n        /**\n         * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n         * a relativeParent. This will allow a component to perform scale correction\n         * even if no animation has started.\n         */\n        // TODO If this is unsuccessful this currently happens every frame\n\n        if (!this.targetDelta && !this.relativeTarget) {\n          // TODO: This is a semi-repetition of further down this function, make DRY\n          var relativeParent = this.getClosestProjectingParent();\n\n          if (relativeParent && relativeParent.layout) {\n            this.relativeParent = relativeParent;\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          } else {\n            this.relativeParent = this.relativeTarget = undefined;\n          }\n        }\n        /**\n         * If we have no relative target or no target delta our target isn't valid\n         * for this frame.\n         */\n\n\n        if (!this.relativeTarget && !this.targetDelta) return;\n        /**\n         * Lazy-init target data structure\n         */\n\n        if (!this.target) {\n          this.target = createBox();\n          this.targetWithTransforms = createBox();\n        }\n        /**\n         * If we've got a relative box for this component, resolve it into a target relative to the parent.\n         */\n\n\n        if (this.relativeTarget && this.relativeTargetOrigin && ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n          calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n          /**\n           * If we've only got a targetDelta, resolve it into a target\n           */\n        } else if (this.targetDelta) {\n          if (Boolean(this.resumingFrom)) {\n            // TODO: This is creating a new object every frame\n            this.target = this.applyTransform(this.layout.layoutBox);\n          } else {\n            copyBoxInto(this.target, this.layout.layoutBox);\n          }\n\n          applyBoxDelta(this.target, this.targetDelta);\n        } else {\n          /**\n           * If no target, use own layout as target\n           */\n          copyBoxInto(this.target, this.layout.layoutBox);\n        }\n        /**\n         * If we've been told to attempt to resolve a relative target, do so.\n         */\n\n\n        if (this.attemptToResolveRelativeTarget) {\n          this.attemptToResolveRelativeTarget = false;\n\n          var _relativeParent = this.getClosestProjectingParent();\n\n          if (_relativeParent && Boolean(_relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !_relativeParent.options.layoutScroll && _relativeParent.target) {\n            this.relativeParent = _relativeParent;\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.target, _relativeParent.target);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          } else {\n            this.relativeParent = this.relativeTarget = undefined;\n          }\n        }\n      }\n    }, {\n      key: \"getClosestProjectingParent\",\n      value: function getClosestProjectingParent() {\n        if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) return undefined;\n\n        if ((this.parent.relativeTarget || this.parent.targetDelta) && this.parent.layout) {\n          return this.parent;\n        } else {\n          return this.parent.getClosestProjectingParent();\n        }\n      }\n    }, {\n      key: \"calcProjection\",\n      value: function calcProjection() {\n        var _a;\n\n        if (!this.isProjectionDirty) return;\n        this.isProjectionDirty = false;\n        var _this$options4 = this.options,\n            layout = _this$options4.layout,\n            layoutId = _this$options4.layoutId;\n        /**\n         * If this section of the tree isn't animating we can\n         * delete our target sources for the following frame.\n         */\n\n        this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) || this.currentAnimation || this.pendingAnimation);\n\n        if (!this.isTreeAnimating) {\n          this.targetDelta = this.relativeTarget = undefined;\n        }\n\n        if (!this.layout || !(layout || layoutId)) return;\n        var lead = this.getLead();\n        /**\n         * Reset the corrected box with the latest values from box, as we're then going\n         * to perform mutative operations on it.\n         */\n\n        copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n        /**\n         * Apply all the parent deltas to this box to produce the corrected box. This\n         * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n         */\n\n        applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n        var target = lead.target;\n        if (!target) return;\n\n        if (!this.projectionDelta) {\n          this.projectionDelta = createDelta();\n          this.projectionDeltaWithTransform = createDelta();\n        }\n\n        var prevTreeScaleX = this.treeScale.x;\n        var prevTreeScaleY = this.treeScale.y;\n        var prevProjectionTransform = this.projectionTransform;\n        /**\n         * Update the delta between the corrected box and the target box before user-set transforms were applied.\n         * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n         * for our layout reprojection, but still allow them to be scaled correctly by the user.\n         * It might be that to simplify this we may want to accept that user-set scale is also corrected\n         * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n         * to allow people to choose whether these styles are corrected based on just the\n         * layout reprojection or the final bounding box.\n         */\n\n        calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n        this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n\n        if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n          this.hasProjected = true;\n          this.scheduleRender();\n          this.notifyListeners(\"projectionUpdate\", target);\n        }\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        this.isVisible = false; // TODO: Schedule render\n      }\n    }, {\n      key: \"show\",\n      value: function show() {\n        this.isVisible = true; // TODO: Schedule render\n      }\n    }, {\n      key: \"scheduleRender\",\n      value: function scheduleRender() {\n        var notifyAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n        var _a, _b, _c;\n\n        (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n        notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n\n        if (this.resumingFrom && !this.resumingFrom.instance) {\n          this.resumingFrom = undefined;\n        }\n      }\n    }, {\n      key: \"setAnimationOrigin\",\n      value: function setAnimationOrigin(delta) {\n        var _this4 = this;\n\n        var hasOnlyRelativeTargetChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        var _a, _b;\n\n        var snapshot = this.snapshot;\n        var snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n\n        var mixedValues = _objectSpread({}, this.latestValues);\n\n        var targetDelta = createDelta();\n        this.relativeTarget = this.relativeTargetOrigin = undefined;\n        this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n        var relativeLayout = createBox();\n        var isSharedLayoutAnimation = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.source) !== ((_a = this.layout) === null || _a === void 0 ? void 0 : _a.source);\n        var isOnlyMember = (((_b = this.getStack()) === null || _b === void 0 ? void 0 : _b.members.length) || 0) <= 1;\n        var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n        this.animationProgress = 0;\n\n        this.mixTargetDelta = function (latest) {\n          var _a;\n\n          var progress = latest / 1000;\n          mixAxisDelta(targetDelta.x, delta.x, progress);\n          mixAxisDelta(targetDelta.y, delta.y, progress);\n\n          _this4.setTargetDelta(targetDelta);\n\n          if (_this4.relativeTarget && _this4.relativeTargetOrigin && _this4.layout && ((_a = _this4.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n            calcRelativePosition(relativeLayout, _this4.layout.layoutBox, _this4.relativeParent.layout.layoutBox);\n            mixBox(_this4.relativeTarget, _this4.relativeTargetOrigin, relativeLayout, progress);\n          }\n\n          if (isSharedLayoutAnimation) {\n            _this4.animationValues = mixedValues;\n            mixValues(mixedValues, snapshotLatestValues, _this4.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n          }\n\n          _this4.root.scheduleUpdateProjection();\n\n          _this4.scheduleRender();\n\n          _this4.animationProgress = progress;\n        };\n\n        this.mixTargetDelta(0);\n      }\n    }, {\n      key: \"startAnimation\",\n      value: function startAnimation(options) {\n        var _this5 = this;\n\n        var _a, _b;\n\n        this.notifyListeners(\"animationStart\");\n        (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n\n        if (this.resumingFrom) {\n          (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n        }\n\n        if (this.pendingAnimation) {\n          cancelSync.update(this.pendingAnimation);\n          this.pendingAnimation = undefined;\n        }\n        /**\n         * Start the animation in the next frame to have a frame with progress 0,\n         * where the target is the same as when the animation started, so we can\n         * calculate the relative positions correctly for instant transitions.\n         */\n\n\n        this.pendingAnimation = sync.update(function () {\n          globalProjectionState.hasAnimatedSinceResize = true;\n          _this5.currentAnimation = animate(0, animationTarget, _objectSpread(_objectSpread({}, options), {}, {\n            onUpdate: function onUpdate(latest) {\n              var _a;\n\n              _this5.mixTargetDelta(latest);\n\n              (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n            },\n            onComplete: function onComplete() {\n              var _a;\n\n              (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n\n              _this5.completeAnimation();\n            }\n          }));\n\n          if (_this5.resumingFrom) {\n            _this5.resumingFrom.currentAnimation = _this5.currentAnimation;\n          }\n\n          _this5.pendingAnimation = undefined;\n        });\n      }\n    }, {\n      key: \"completeAnimation\",\n      value: function completeAnimation() {\n        var _a;\n\n        if (this.resumingFrom) {\n          this.resumingFrom.currentAnimation = undefined;\n          this.resumingFrom.preserveOpacity = undefined;\n        }\n\n        (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n        this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n        this.notifyListeners(\"animationComplete\");\n      }\n    }, {\n      key: \"finishAnimation\",\n      value: function finishAnimation() {\n        var _a;\n\n        if (this.currentAnimation) {\n          (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n          this.currentAnimation.stop();\n        }\n\n        this.completeAnimation();\n      }\n    }, {\n      key: \"applyTransformsToTarget\",\n      value: function applyTransformsToTarget() {\n        var lead = this.getLead();\n        var targetWithTransforms = lead.targetWithTransforms,\n            target = lead.target,\n            layout = lead.layout,\n            latestValues = lead.latestValues;\n        if (!targetWithTransforms || !target || !layout) return;\n        /**\n         * If we're only animating position, and this element isn't the lead element,\n         * then instead of projecting into the lead box we instead want to calculate\n         * a new target that aligns the two boxes but maintains the layout shape.\n         */\n\n        if (this !== lead && this.layout && layout && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n          target = this.target || createBox();\n          var xLength = calcLength(this.layout.layoutBox.x);\n          target.x.min = lead.target.x.min;\n          target.x.max = target.x.min + xLength;\n          var yLength = calcLength(this.layout.layoutBox.y);\n          target.y.min = lead.target.y.min;\n          target.y.max = target.y.min + yLength;\n        }\n\n        copyBoxInto(targetWithTransforms, target);\n        /**\n         * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n         * This is the final box that we will then project into by calculating a transform delta and\n         * applying it to the corrected box.\n         */\n\n        transformBox(targetWithTransforms, latestValues);\n        /**\n         * Update the delta between the corrected box and the final target box, after\n         * user-set transforms are applied to it. This will be used by the renderer to\n         * create a transform style that will reproject the element from its layout layout\n         * into the desired bounding box.\n         */\n\n        calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n      }\n    }, {\n      key: \"registerSharedNode\",\n      value: function registerSharedNode(layoutId, node) {\n        var _a, _b, _c;\n\n        if (!this.sharedNodes.has(layoutId)) {\n          this.sharedNodes.set(layoutId, new NodeStack());\n        }\n\n        var stack = this.sharedNodes.get(layoutId);\n        stack.add(node);\n        node.promote({\n          transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n          preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node)\n        });\n      }\n    }, {\n      key: \"isLead\",\n      value: function isLead() {\n        var stack = this.getStack();\n        return stack ? stack.lead === this : true;\n      }\n    }, {\n      key: \"getLead\",\n      value: function getLead() {\n        var _a;\n\n        var layoutId = this.options.layoutId;\n        return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n      }\n    }, {\n      key: \"getPrevLead\",\n      value: function getPrevLead() {\n        var _a;\n\n        var layoutId = this.options.layoutId;\n        return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n      }\n    }, {\n      key: \"getStack\",\n      value: function getStack() {\n        var layoutId = this.options.layoutId;\n        if (layoutId) return this.root.sharedNodes.get(layoutId);\n      }\n    }, {\n      key: \"promote\",\n      value: function promote() {\n        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            needsReset = _ref3.needsReset,\n            transition = _ref3.transition,\n            preserveFollowOpacity = _ref3.preserveFollowOpacity;\n\n        var stack = this.getStack();\n        if (stack) stack.promote(this, preserveFollowOpacity);\n\n        if (needsReset) {\n          this.projectionDelta = undefined;\n          this.needsReset = true;\n        }\n\n        if (transition) this.setOptions({\n          transition: transition\n        });\n      }\n    }, {\n      key: \"relegate\",\n      value: function relegate() {\n        var stack = this.getStack();\n\n        if (stack) {\n          return stack.relegate(this);\n        } else {\n          return false;\n        }\n      }\n    }, {\n      key: \"resetRotation\",\n      value: function resetRotation() {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return; // If there's no detected rotation values, we can early return without a forced render.\n\n        var hasRotate = false;\n        /**\n         * An unrolled check for rotation values. Most elements don't have any rotation and\n         * skipping the nested loop and new object creation is 50% faster.\n         */\n\n        var latestValues = visualElement.latestValues;\n\n        if (latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ) {\n          hasRotate = true;\n        } // If there's no rotation values, we don't need to do any more.\n\n\n        if (!hasRotate) return;\n        var resetValues = {}; // Check the rotate value of all axes and reset to 0\n\n        for (var i = 0; i < transformAxes.length; i++) {\n          var key = \"rotate\" + transformAxes[i]; // Record the rotation and then temporarily set it to 0\n\n          if (latestValues[key]) {\n            resetValues[key] = latestValues[key];\n            visualElement.setStaticValue(key, 0);\n          }\n        } // Force a render of this element to apply the transform with all rotations\n        // set to 0.\n\n\n        visualElement === null || visualElement === void 0 ? void 0 : visualElement.render(); // Put back all the values we reset\n\n        for (var _key2 in resetValues) {\n          visualElement.setStaticValue(_key2, resetValues[_key2]);\n        } // Schedule a render for the next frame. This ensures we won't visually\n        // see the element with the reset rotate value applied.\n\n\n        visualElement.scheduleRender();\n      }\n    }, {\n      key: \"getProjectionStyles\",\n      value: function getProjectionStyles() {\n        var styleProp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var _a, _b, _c; // TODO: Return lifecycle-persistent object\n\n\n        var styles = {};\n        if (!this.instance || this.isSVG) return styles;\n\n        if (!this.isVisible) {\n          return {\n            visibility: \"hidden\"\n          };\n        } else {\n          styles.visibility = \"\";\n        }\n\n        var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n\n        if (this.needsReset) {\n          this.needsReset = false;\n          styles.opacity = \"\";\n          styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n          styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n          return styles;\n        }\n\n        var lead = this.getLead();\n\n        if (!this.projectionDelta || !this.layout || !lead.target) {\n          var emptyStyles = {};\n\n          if (this.options.layoutId) {\n            emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n            emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n          }\n\n          if (this.hasProjected && !hasTransform(this.latestValues)) {\n            emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n            this.hasProjected = false;\n          }\n\n          return emptyStyles;\n        }\n\n        var valuesToRender = lead.animationValues || lead.latestValues;\n        this.applyTransformsToTarget();\n        styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n\n        if (transformTemplate) {\n          styles.transform = transformTemplate(valuesToRender, styles.transform);\n        }\n\n        var _this$projectionDelta = this.projectionDelta,\n            x = _this$projectionDelta.x,\n            y = _this$projectionDelta.y;\n        styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n\n        if (lead.animationValues) {\n          /**\n           * If the lead component is animating, assign this either the entering/leaving\n           * opacity\n           */\n          styles.opacity = lead === this ? (_c = (_b = valuesToRender.opacity) !== null && _b !== void 0 ? _b : this.latestValues.opacity) !== null && _c !== void 0 ? _c : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n        } else {\n          /**\n           * Or we're not animating at all, set the lead component to its layout\n           * opacity and other components to hidden.\n           */\n          styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n        }\n        /**\n         * Apply scale correction\n         */\n\n\n        for (var key in scaleCorrectors) {\n          if (valuesToRender[key] === undefined) continue;\n          var _scaleCorrectors$key = scaleCorrectors[key],\n              correct = _scaleCorrectors$key.correct,\n              applyTo = _scaleCorrectors$key.applyTo;\n          var corrected = correct(valuesToRender[key], lead);\n\n          if (applyTo) {\n            var num = applyTo.length;\n\n            for (var i = 0; i < num; i++) {\n              styles[applyTo[i]] = corrected;\n            }\n          } else {\n            styles[key] = corrected;\n          }\n        }\n        /**\n         * Disable pointer events on follow components. This is to ensure\n         * that if a follow component covers a lead component it doesn't block\n         * pointer events on the lead.\n         */\n\n\n        if (this.options.layoutId) {\n          styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || \"\" : \"none\";\n        }\n\n        return styles;\n      }\n    }, {\n      key: \"clearSnapshot\",\n      value: function clearSnapshot() {\n        this.resumeFrom = this.snapshot = undefined;\n      } // Only run on root\n\n    }, {\n      key: \"resetTree\",\n      value: function resetTree() {\n        this.root.nodes.forEach(function (node) {\n          var _a;\n\n          return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n        });\n        this.root.nodes.forEach(clearMeasurements);\n        this.root.sharedNodes.clear();\n      }\n    }]);\n\n    return ProjectionNode;\n  }();\n}\n\nfunction updateLayout(node) {\n  node.updateLayout();\n}\n\nfunction notifyLayoutUpdate(node) {\n  var _a, _b, _c;\n\n  var snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    var _node$layout = node.layout,\n        layout = _node$layout.layoutBox,\n        measuredLayout = _node$layout.measuredBox;\n    var animationType = node.options.animationType;\n    var isShared = snapshot.source !== node.layout.source; // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n\n    if (animationType === \"size\") {\n      eachAxis(function (axis) {\n        var axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        var length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n      eachAxis(function (axis) {\n        var axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        var length = calcLength(layout[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    }\n\n    var layoutDelta = createDelta();\n    calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n    var visualDelta = createDelta();\n\n    if (isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n    } else {\n      calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n    }\n\n    var hasLayoutChanged = !isDeltaZero(layoutDelta);\n    var hasRelativeTargetChanged = false;\n\n    if (!node.resumeFrom) {\n      var relativeParent = node.getClosestProjectingParent();\n      /**\n       * If the relativeParent is itself resuming from a different element then\n       * the relative snapshot is not relavent\n       */\n\n      if (relativeParent && !relativeParent.resumeFrom) {\n        var parentSnapshot = relativeParent.snapshot,\n            parentLayout = relativeParent.layout;\n\n        if (parentSnapshot && parentLayout) {\n          var relativeSnapshot = createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n          var relativeLayout = createBox();\n          calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n\n          if (!boxEquals(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n        }\n      }\n    }\n\n    node.notifyListeners(\"didUpdate\", {\n      layout: layout,\n      snapshot: snapshot,\n      delta: visualDelta,\n      layoutDelta: layoutDelta,\n      hasLayoutChanged: hasLayoutChanged,\n      hasRelativeTargetChanged: hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    (_c = (_b = node.options).onExitComplete) === null || _c === void 0 ? void 0 : _c.call(_b);\n  }\n  /**\n   * Clearing transition\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n   * and why we need it at all\n   */\n\n\n  node.options.transition = undefined;\n}\n\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\n\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\n\nfunction resetTransformStyle(node) {\n  var visualElement = node.options.visualElement;\n\n  if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n    visualElement.notify(\"BeforeLayoutMeasure\");\n  }\n\n  node.resetTransform();\n}\n\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n}\n\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\n\nfunction calcProjection(node) {\n  node.calcProjection();\n}\n\nfunction resetRotation(node) {\n  node.resetRotation();\n}\n\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\n\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = mix(delta.translate, 0, p);\n  output.scale = mix(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\n\nfunction mixAxis(output, from, to, p) {\n  output.min = mix(from.min, to.min, p);\n  output.max = mix(from.max, to.max, p);\n}\n\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\n\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\n\nvar defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\n\nfunction mountNodeEarly(node, elementId) {\n  /**\n   * Rather than searching the DOM from document we can search the\n   * path for the deepest mounted ancestor and search from there\n   */\n  var searchNode = node.root;\n\n  for (var i = node.path.length - 1; i >= 0; i--) {\n    if (Boolean(node.path[i].instance)) {\n      searchNode = node.path[i];\n      break;\n    }\n  }\n\n  var searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n  var element = searchElement.querySelector(\"[data-projection-id=\\\"\".concat(elementId, \"\\\"]\"));\n  if (element) node.mount(element, true);\n}\n\nfunction roundAxis(axis) {\n  axis.min = Math.round(axis.min);\n  axis.max = Math.round(axis.max);\n}\n\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\n\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n  return animationType === \"position\" || animationType === \"preserve-aspect\" && !isCloseTo(aspectRatio(snapshot), aspectRatio(layout), 0.2);\n}\n\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox };","map":{"version":3,"names":["sync","cancelSync","flushSync","mix","animate","SubscriptionManager","mixValues","copyBoxInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcRelativePosition","calcRelativeBox","calcBoxDelta","calcLength","removeBoxTransforms","createBox","createDelta","getValueTransition","boxEquals","isDeltaZero","isCloseTo","aspectRatio","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","has2DTranslate","FlatTree","resolveMotionValue","globalProjectionState","delay","transformAxes","animationTarget","id","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","elementId","latestValues","parent","animationId","children","Set","options","isTreeAnimating","isAnimationBlocked","isLayoutDirty","isProjectionDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","potentialNodes","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","resolveTargetDelta","calcProjection","hasProjected","isVisible","animationProgress","sharedNodes","root","path","depth","registerPotentialNode","i","length","name","handler","has","set","get","add","subscriptionManager","args","notify","node","instance","_a","SVGElement","tagName","layoutId","layout","visualElement","current","mount","delete","cancelDelay","resizeUnblockUpdate","hasAnimatedSinceResize","finishAnimation","registerSharedNode","addEventListener","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","_b","_c","_d","_e","isTreeAnimationBlocked","target","undefined","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","getProps","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","animationOptions","onPlay","onComplete","shouldReduceMotion","type","startAnimation","isLead","onExitComplete","call","willUpdate","remove","getStack","preRender","isUpdateBlocked","resetRotation","shouldNotifyListeners","startUpdate","updateScroll","transformTemplate","prevTransformTemplateValue","updateSnapshot","notifyListeners","updateWasBlocked","unblockUpdate","clearMeasurements","size","mountNodeEarly","clear","resetTransformStyle","updateLayout","notifyLayoutUpdate","update","render","clearSnapshot","removeLeadSnapshots","postRender","didUpdate","snapshot","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","projectionDelta","layoutBox","phase","needsMeasurement","Boolean","layoutScroll","scroll","isRoot","offset","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","removeTransform","pageBox","measurePageBox","removeElementScroll","roundBox","positionStyle","readValue","position","measuredBox","source","box","measureViewportBox","boxWithoutScroll","rootScroll","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","targetDelta","scheduleUpdateProjection","crossfade","getLead","relativeParent","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","applyTransform","attemptToResolveRelativeTarget","pendingAnimation","lead","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isOnlyMember","members","shouldCrossfadeOpacity","some","hasOpacityCrossfade","mixTargetDelta","latest","progress","mixAxisDelta","setTargetDelta","mixBox","animationValues","stop","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","shouldAnimatePositionOnly","animationType","xLength","min","max","yLength","stack","promote","initialPromotionConfig","preserveFollowOpacity","shouldPreserveFollowOpacity","prevLead","setOptions","relegate","hasRotate","rotate","rotateX","rotateY","rotateZ","resetValues","key","setStaticValue","styleProp","styles","visibility","opacity","pointerEvents","transform","emptyStyles","valuesToRender","applyTransformsToTarget","transformOrigin","origin","opacityExit","correct","applyTo","corrected","num","hasListeners","measuredLayout","isShared","axis","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","searchNode","searchElement","document","element","querySelector","roundAxis","Math","round"],"sources":["C:/Users/HP/Desktop/dashboard/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"sourcesContent":["import sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, isCloseTo, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(elementId, latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this or any\n             * child might need recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            this.updateProjection = () => {\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.elementId = elementId;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            elementId && this.root.registerPotentialNode(elementId, this);\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        registerPotentialNode(elementId, node) {\n            this.potentialNodes.set(elementId, node);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = false) {\n            var _a;\n            if (this.instance)\n                return;\n            this.isSVG =\n                instance instanceof SVGElement && instance.tagName !== \"svg\";\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n            this.elementId && this.root.potentialNodes.delete(this.elementId);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    var _a, _b, _c, _d, _e;\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = (_b = (_a = this.options.transition) !== null && _a !== void 0 ? _a : visualElement.getDefaultTransition()) !== null && _b !== void 0 ? _b : defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEquals(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (((_c = this.resumeFrom) === null || _c === void 0 ? void 0 : _c.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged &&\n                            this.animationProgress === 0) {\n                            finishAnimation(this);\n                        }\n                        this.isLead() && ((_e = (_d = this.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d));\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            var _a, _b;\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n            this.instance = undefined;\n            cancelSync.preRender(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            var _a;\n            return (this.isAnimationBlocked ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            var _a;\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n            this.animationId++;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            var _a, _b, _c;\n            if (this.root.isUpdateBlocked()) {\n                (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n            this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        // Note: Currently only running on root node\n        didUpdate() {\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */\n            if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            flushSync.update();\n            flushSync.preRender();\n            flushSync.render();\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            sync.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            sync.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            var _a;\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.layoutBox);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            var _a;\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            const transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            var _a;\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            const positionStyle = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.readValue(\"position\");\n            const position = positionStyle === \"fixed\" || positionStyle === \"sticky\"\n                ? positionStyle\n                : \"static\";\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n                position,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            var _a;\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layoutBox, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        /**\n         *\n         */\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.isProjectionDirty = true;\n            this.root.scheduleUpdateProjection();\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        /**\n         * Frame calculations\n         */\n        resolveTargetDelta() {\n            var _a;\n            /**\n             * Propagate isProjectionDirty. Nodes are ordered by depth, so if the parent here\n             * is dirty we can simply pass this forward.\n             */\n            this.isProjectionDirty || (this.isProjectionDirty = this.getLead().isProjectionDirty ||\n                Boolean(this.parent && this.parent.isProjectionDirty));\n            if (!this.isProjectionDirty)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent && relativeParent.layout) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues))\n                return undefined;\n            if ((this.parent.relativeTarget || this.parent.targetDelta) &&\n                this.parent.layout) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        calcProjection() {\n            var _a;\n            if (!this.isProjectionDirty)\n                return;\n            this.isProjectionDirty = false;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            const lead = this.getLead();\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n            const { target } = lead;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            var _a, _b, _c;\n            (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n            notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            var _a, _b;\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            this.relativeTarget = this.relativeTargetOrigin = undefined;\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const isSharedLayoutAnimation = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.source) !== ((_a = this.layout) === null || _a === void 0 ? void 0 : _a.source);\n            const isOnlyMember = (((_b = this.getStack()) === null || _b === void 0 ? void 0 : _b.members.length) || 0) <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            this.mixTargetDelta = (latest) => {\n                var _a;\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(0);\n        }\n        startAnimation(options) {\n            var _a, _b;\n            this.notifyListeners(\"animationStart\");\n            (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            if (this.resumingFrom) {\n                (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelSync.update(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = sync.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animate(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        var _a;\n                        this.mixTargetDelta(latest);\n                        (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n                    },\n                    onComplete: () => {\n                        var _a;\n                        (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            var _a;\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            var _a;\n            if (this.currentAnimation) {\n                (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            var _a, _b, _c;\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            node.promote({\n                transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n                preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node),\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement === null || visualElement === void 0 ? void 0 : visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b, _c;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_c = (_b = valuesToRender.opacity) !== null && _b !== void 0 ? _b : this.latestValues.opacity) !== null && _c !== void 0 ? _c : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                const corrected = correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a, _b, _c;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        (_c = (_b = node.options).onExitComplete) === null || _c === void 0 ? void 0 : _c.call(_b);\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction mountNodeEarly(node, elementId) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */\n    let searchNode = node.root;\n    for (let i = node.path.length - 1; i >= 0; i--) {\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    const element = searchElement.querySelector(`[data-projection-id=\"${elementId}\"]`);\n    if (element)\n        node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isCloseTo(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}