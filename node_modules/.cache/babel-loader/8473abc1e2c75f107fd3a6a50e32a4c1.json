{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\dashboard\\\\src\\\\views\\\\AutoComplete.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AutoComplete = _ref => {\n  _s();\n\n  let {\n    options = []\n  } = _ref;\n  const [value, setValue] = useState(\"\");\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const suggestions = options.filter(option => option.toLowerCase().includes(value.toLowerCase()));\n  const autocompleteRef = useRef();\n  useEffect(() => {\n    const handleClick = event => {\n      if (autocompleteRef.current && !autocompleteRef.current.contains(event.target)) {\n        setShowSuggestions(false);\n      }\n    };\n\n    document.addEventListener(\"click\", handleClick);\n    return () => {\n      document.removeEventListener(\"click\", handleClick);\n    };\n  }, []);\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n\n  const handleSuggestionClick = suggetion => {\n    setValue(suggetion);\n    setShowSuggestions(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"autocomplete\",\n    ref: autocompleteRef,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: value,\n      onChange: handleChange,\n      placeholder: \"Search\",\n      onFocus: () => setShowSuggestions(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), showSuggestions && /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"suggestions\",\n      children: suggestions.map(suggestion => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleSuggestionClick(suggestion),\n        children: suggestion\n      }, suggestion, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AutoComplete, \"l0VLzNd6lLaS6myG1nGouU/PZZ0=\");\n\n_c = AutoComplete;\nexport default AutoComplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoComplete\");","map":{"version":3,"names":["useState","useEffect","useRef","AutoComplete","options","value","setValue","showSuggestions","setShowSuggestions","suggestions","filter","option","toLowerCase","includes","autocompleteRef","handleClick","event","current","contains","target","document","addEventListener","removeEventListener","handleChange","handleSuggestionClick","suggetion","map","suggestion"],"sources":["C:/Users/HP/Desktop/dashboard/src/views/AutoComplete.js"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\n\r\nconst AutoComplete = ({ options = [] }) => {\r\n    const [value, setValue] = useState(\"\");\r\n    const [showSuggestions, setShowSuggestions] = useState(false);\r\n    const suggestions = options.filter(option => option.toLowerCase().includes(value.toLowerCase()))\r\n\r\n    const autocompleteRef = useRef();\r\n\r\n    useEffect(() => {\r\n        const handleClick = (event) => {\r\n            if (autocompleteRef.current && !autocompleteRef.current.contains(event.target)) {\r\n                setShowSuggestions(false)\r\n            }\r\n        };\r\n        document.addEventListener(\"click\", handleClick);\r\n        return () => {\r\n            document.removeEventListener(\"click\", handleClick)\r\n        }\r\n    }, [])\r\n\r\n    const handleChange = event => {\r\n        setValue(event.target.value);\r\n    }\r\n\r\n    const handleSuggestionClick = (suggetion) => {\r\n        setValue(suggetion);\r\n        setShowSuggestions(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"autocomplete\" ref={autocompleteRef}>\r\n            <input\r\n                value={value}\r\n                onChange={handleChange}\r\n                placeholder=\"Search\"\r\n                onFocus={() => setShowSuggestions(true)}\r\n            />\r\n            {showSuggestions && (\r\n                <ul className=\"suggestions\">\r\n                    {suggestions.map(suggestion => (\r\n                        <li onClick={() => handleSuggestionClick(suggestion)} key={suggestion}>\r\n                            {suggestion}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            )}\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default AutoComplete;"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;;;AAEA,MAAMC,YAAY,GAAG,QAAsB;EAAA;;EAAA,IAArB;IAAEC,OAAO,GAAG;EAAZ,CAAqB;EACvC,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAC,KAAD,CAAtD;EACA,MAAMS,WAAW,GAAGL,OAAO,CAACM,MAAR,CAAeC,MAAM,IAAIA,MAAM,CAACC,WAAP,GAAqBC,QAArB,CAA8BR,KAAK,CAACO,WAAN,EAA9B,CAAzB,CAApB;EAEA,MAAME,eAAe,GAAGZ,MAAM,EAA9B;EAEAD,SAAS,CAAC,MAAM;IACZ,MAAMc,WAAW,GAAIC,KAAD,IAAW;MAC3B,IAAIF,eAAe,CAACG,OAAhB,IAA2B,CAACH,eAAe,CAACG,OAAhB,CAAwBC,QAAxB,CAAiCF,KAAK,CAACG,MAAvC,CAAhC,EAAgF;QAC5EX,kBAAkB,CAAC,KAAD,CAAlB;MACH;IACJ,CAJD;;IAKAY,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCN,WAAnC;IACA,OAAO,MAAM;MACTK,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsCP,WAAtC;IACH,CAFD;EAGH,CAVQ,EAUN,EAVM,CAAT;;EAYA,MAAMQ,YAAY,GAAGP,KAAK,IAAI;IAC1BV,QAAQ,CAACU,KAAK,CAACG,MAAN,CAAad,KAAd,CAAR;EACH,CAFD;;EAIA,MAAMmB,qBAAqB,GAAIC,SAAD,IAAe;IACzCnB,QAAQ,CAACmB,SAAD,CAAR;IACAjB,kBAAkB,CAAC,KAAD,CAAlB;EACH,CAHD;;EAKA,oBACI;IAAK,SAAS,EAAC,cAAf;IAA8B,GAAG,EAAEM,eAAnC;IAAA,wBACI;MACI,KAAK,EAAET,KADX;MAEI,QAAQ,EAAEkB,YAFd;MAGI,WAAW,EAAC,QAHhB;MAII,OAAO,EAAE,MAAMf,kBAAkB,CAAC,IAAD;IAJrC;MAAA;MAAA;MAAA;IAAA,QADJ,EAOKD,eAAe,iBACZ;MAAI,SAAS,EAAC,aAAd;MAAA,UACKE,WAAW,CAACiB,GAAZ,CAAgBC,UAAU,iBACvB;QAAI,OAAO,EAAE,MAAMH,qBAAqB,CAACG,UAAD,CAAxC;QAAA,UACKA;MADL,GAA2DA,UAA3D;QAAA;QAAA;QAAA;MAAA,QADH;IADL;MAAA;MAAA;MAAA;IAAA,QARR;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAoBH,CAhDD;;GAAMxB,Y;;KAAAA,Y;AAkDN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}